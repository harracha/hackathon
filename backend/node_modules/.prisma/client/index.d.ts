
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  username: string
  info: Prisma.JsonValue | null
  email: string
  password: string
  userRole: UserRole
  avatar: string | null
  googleUserId: string | null
  userStatus: UserStatus
  keywords: string[]
}

/**
 * Model Device
 * 
 */
export type Device = {
  id: string
  name: string
  userId: string
  status: DeviceStatus
}

/**
 * Model Threat
 * 
 */
export type Threat = {
  id: string
  deviceId: string
  type: ThreatType
  info: Prisma.JsonValue
}

/**
 * Model Connection
 * 
 */
export type Connection = {
  id: string
  connectionStatus: ConnectionStatus
}

/**
 * Model Req
 * 
 */
export type Req = {
  id: string
  connectionId: string
  senderDeviceId: string
  receiverDeviceId: string
  reqExpress: Prisma.JsonValue
}

/**
 * Model Res
 * 
 */
export type Res = {
  id: string
  connectionId: string
  senderDeviceId: string
  receiverDeviceId: string
  resExpress: Prisma.JsonValue
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const ConnectionStatus: {
  ACTIVE: 'ACTIVE',
  ARCHIVED: 'ARCHIVED',
  FLAGGED: 'FLAGGED',
  PENDING: 'PENDING'
};

export type ConnectionStatus = (typeof ConnectionStatus)[keyof typeof ConnectionStatus]


export const DeviceStatus: {
  ONLINE: 'ONLINE',
  OFFLINE: 'OFFLINE',
  ARCHIVED: 'ARCHIVED'
};

export type DeviceStatus = (typeof DeviceStatus)[keyof typeof DeviceStatus]


export const ThreatType: {
  HIGH: 'HIGH',
  MEDIUM: 'MEDIUM',
  LOW: 'LOW'
};

export type ThreatType = (typeof ThreatType)[keyof typeof ThreatType]


export const UserRole: {
  DEFAULT: 'DEFAULT',
  ADMIN: 'ADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const UserStatus: {
  ACTIVE: 'ACTIVE',
  ARCHIVED: 'ARCHIVED',
  PENDING: 'PENDING'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.device`: Exposes CRUD operations for the **Device** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Devices
    * const devices = await prisma.device.findMany()
    * ```
    */
  get device(): Prisma.DeviceDelegate<GlobalReject>;

  /**
   * `prisma.threat`: Exposes CRUD operations for the **Threat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Threats
    * const threats = await prisma.threat.findMany()
    * ```
    */
  get threat(): Prisma.ThreatDelegate<GlobalReject>;

  /**
   * `prisma.connection`: Exposes CRUD operations for the **Connection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Connections
    * const connections = await prisma.connection.findMany()
    * ```
    */
  get connection(): Prisma.ConnectionDelegate<GlobalReject>;

  /**
   * `prisma.req`: Exposes CRUD operations for the **Req** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reqs
    * const reqs = await prisma.req.findMany()
    * ```
    */
  get req(): Prisma.ReqDelegate<GlobalReject>;

  /**
   * `prisma.res`: Exposes CRUD operations for the **Res** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Res
    * const res = await prisma.res.findMany()
    * ```
    */
  get res(): Prisma.ResDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.11.0
   * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Device: 'Device',
    Threat: 'Threat',
    Connection: 'Connection',
    Req: 'Req',
    Res: 'Res'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    devices: number
  }

  export type UserCountOutputTypeSelect = {
    devices?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type DeviceCountOutputType
   */


  export type DeviceCountOutputType = {
    quarantine: number
    connection: number
  }

  export type DeviceCountOutputTypeSelect = {
    quarantine?: boolean
    connection?: boolean
  }

  export type DeviceCountOutputTypeGetPayload<S extends boolean | null | undefined | DeviceCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DeviceCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (DeviceCountOutputTypeArgs)
    ? DeviceCountOutputType 
    : S extends { select: any } & (DeviceCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof DeviceCountOutputType ? DeviceCountOutputType[P] : never
  } 
      : DeviceCountOutputType




  // Custom InputTypes

  /**
   * DeviceCountOutputType without action
   */
  export type DeviceCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DeviceCountOutputType
     */
    select?: DeviceCountOutputTypeSelect | null
  }



  /**
   * Count Type ConnectionCountOutputType
   */


  export type ConnectionCountOutputType = {
    req: number
    res: number
    device: number
  }

  export type ConnectionCountOutputTypeSelect = {
    req?: boolean
    res?: boolean
    device?: boolean
  }

  export type ConnectionCountOutputTypeGetPayload<S extends boolean | null | undefined | ConnectionCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ConnectionCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ConnectionCountOutputTypeArgs)
    ? ConnectionCountOutputType 
    : S extends { select: any } & (ConnectionCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ConnectionCountOutputType ? ConnectionCountOutputType[P] : never
  } 
      : ConnectionCountOutputType




  // Custom InputTypes

  /**
   * ConnectionCountOutputType without action
   */
  export type ConnectionCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ConnectionCountOutputType
     */
    select?: ConnectionCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
    userRole: UserRole | null
    avatar: string | null
    googleUserId: string | null
    userStatus: UserStatus | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
    userRole: UserRole | null
    avatar: string | null
    googleUserId: string | null
    userStatus: UserStatus | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    info: number
    email: number
    password: number
    userRole: number
    avatar: number
    googleUserId: number
    userStatus: number
    keywords: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    userRole?: true
    avatar?: true
    googleUserId?: true
    userStatus?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    userRole?: true
    avatar?: true
    googleUserId?: true
    userStatus?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    info?: true
    email?: true
    password?: true
    userRole?: true
    avatar?: true
    googleUserId?: true
    userStatus?: true
    keywords?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    username: string
    info: JsonValue | null
    email: string
    password: string
    userRole: UserRole
    avatar: string | null
    googleUserId: string | null
    userStatus: UserStatus
    keywords: string[]
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    username?: boolean
    info?: boolean
    email?: boolean
    password?: boolean
    userRole?: boolean
    avatar?: boolean
    googleUserId?: boolean
    userStatus?: boolean
    keywords?: boolean
    devices?: boolean | User$devicesArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    devices?: boolean | User$devicesArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'devices' ? Array < DeviceGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'devices' ? Array < DeviceGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    devices<T extends User$devicesArgs= {}>(args?: Subset<T, User$devicesArgs>): Prisma.PrismaPromise<Array<DeviceGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.devices
   */
  export type User$devicesArgs = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    where?: DeviceWhereInput
    orderBy?: Enumerable<DeviceOrderByWithRelationInput>
    cursor?: DeviceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DeviceScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Device
   */


  export type AggregateDevice = {
    _count: DeviceCountAggregateOutputType | null
    _min: DeviceMinAggregateOutputType | null
    _max: DeviceMaxAggregateOutputType | null
  }

  export type DeviceMinAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    status: DeviceStatus | null
  }

  export type DeviceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    status: DeviceStatus | null
  }

  export type DeviceCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    status: number
    _all: number
  }


  export type DeviceMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    status?: true
  }

  export type DeviceMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    status?: true
  }

  export type DeviceCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    status?: true
    _all?: true
  }

  export type DeviceAggregateArgs = {
    /**
     * Filter which Device to aggregate.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: Enumerable<DeviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Devices
    **/
    _count?: true | DeviceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeviceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeviceMaxAggregateInputType
  }

  export type GetDeviceAggregateType<T extends DeviceAggregateArgs> = {
        [P in keyof T & keyof AggregateDevice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDevice[P]>
      : GetScalarType<T[P], AggregateDevice[P]>
  }




  export type DeviceGroupByArgs = {
    where?: DeviceWhereInput
    orderBy?: Enumerable<DeviceOrderByWithAggregationInput>
    by: DeviceScalarFieldEnum[]
    having?: DeviceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeviceCountAggregateInputType | true
    _min?: DeviceMinAggregateInputType
    _max?: DeviceMaxAggregateInputType
  }


  export type DeviceGroupByOutputType = {
    id: string
    name: string
    userId: string
    status: DeviceStatus
    _count: DeviceCountAggregateOutputType | null
    _min: DeviceMinAggregateOutputType | null
    _max: DeviceMaxAggregateOutputType | null
  }

  type GetDeviceGroupByPayload<T extends DeviceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DeviceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeviceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeviceGroupByOutputType[P]>
            : GetScalarType<T[P], DeviceGroupByOutputType[P]>
        }
      >
    >


  export type DeviceSelect = {
    id?: boolean
    name?: boolean
    userId?: boolean
    status?: boolean
    user?: boolean | UserArgs
    quarantine?: boolean | Device$quarantineArgs
    connection?: boolean | Device$connectionArgs
    _count?: boolean | DeviceCountOutputTypeArgs
  }


  export type DeviceInclude = {
    user?: boolean | UserArgs
    quarantine?: boolean | Device$quarantineArgs
    connection?: boolean | Device$connectionArgs
    _count?: boolean | DeviceCountOutputTypeArgs
  }

  export type DeviceGetPayload<S extends boolean | null | undefined | DeviceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Device :
    S extends undefined ? never :
    S extends { include: any } & (DeviceArgs | DeviceFindManyArgs)
    ? Device  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'quarantine' ? Array < ThreatGetPayload<S['include'][P]>>  :
        P extends 'connection' ? Array < ConnectionGetPayload<S['include'][P]>>  :
        P extends '_count' ? DeviceCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (DeviceArgs | DeviceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'quarantine' ? Array < ThreatGetPayload<S['select'][P]>>  :
        P extends 'connection' ? Array < ConnectionGetPayload<S['select'][P]>>  :
        P extends '_count' ? DeviceCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Device ? Device[P] : never
  } 
      : Device


  type DeviceCountArgs = 
    Omit<DeviceFindManyArgs, 'select' | 'include'> & {
      select?: DeviceCountAggregateInputType | true
    }

  export interface DeviceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Device that matches the filter.
     * @param {DeviceFindUniqueArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DeviceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DeviceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Device'> extends True ? Prisma__DeviceClient<DeviceGetPayload<T>> : Prisma__DeviceClient<DeviceGetPayload<T> | null, null>

    /**
     * Find one Device that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DeviceFindUniqueOrThrowArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DeviceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DeviceFindUniqueOrThrowArgs>
    ): Prisma__DeviceClient<DeviceGetPayload<T>>

    /**
     * Find the first Device that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceFindFirstArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DeviceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DeviceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Device'> extends True ? Prisma__DeviceClient<DeviceGetPayload<T>> : Prisma__DeviceClient<DeviceGetPayload<T> | null, null>

    /**
     * Find the first Device that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceFindFirstOrThrowArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DeviceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DeviceFindFirstOrThrowArgs>
    ): Prisma__DeviceClient<DeviceGetPayload<T>>

    /**
     * Find zero or more Devices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Devices
     * const devices = await prisma.device.findMany()
     * 
     * // Get first 10 Devices
     * const devices = await prisma.device.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deviceWithIdOnly = await prisma.device.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DeviceFindManyArgs>(
      args?: SelectSubset<T, DeviceFindManyArgs>
    ): Prisma.PrismaPromise<Array<DeviceGetPayload<T>>>

    /**
     * Create a Device.
     * @param {DeviceCreateArgs} args - Arguments to create a Device.
     * @example
     * // Create one Device
     * const Device = await prisma.device.create({
     *   data: {
     *     // ... data to create a Device
     *   }
     * })
     * 
    **/
    create<T extends DeviceCreateArgs>(
      args: SelectSubset<T, DeviceCreateArgs>
    ): Prisma__DeviceClient<DeviceGetPayload<T>>

    /**
     * Create many Devices.
     *     @param {DeviceCreateManyArgs} args - Arguments to create many Devices.
     *     @example
     *     // Create many Devices
     *     const device = await prisma.device.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DeviceCreateManyArgs>(
      args?: SelectSubset<T, DeviceCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Device.
     * @param {DeviceDeleteArgs} args - Arguments to delete one Device.
     * @example
     * // Delete one Device
     * const Device = await prisma.device.delete({
     *   where: {
     *     // ... filter to delete one Device
     *   }
     * })
     * 
    **/
    delete<T extends DeviceDeleteArgs>(
      args: SelectSubset<T, DeviceDeleteArgs>
    ): Prisma__DeviceClient<DeviceGetPayload<T>>

    /**
     * Update one Device.
     * @param {DeviceUpdateArgs} args - Arguments to update one Device.
     * @example
     * // Update one Device
     * const device = await prisma.device.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DeviceUpdateArgs>(
      args: SelectSubset<T, DeviceUpdateArgs>
    ): Prisma__DeviceClient<DeviceGetPayload<T>>

    /**
     * Delete zero or more Devices.
     * @param {DeviceDeleteManyArgs} args - Arguments to filter Devices to delete.
     * @example
     * // Delete a few Devices
     * const { count } = await prisma.device.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DeviceDeleteManyArgs>(
      args?: SelectSubset<T, DeviceDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Devices
     * const device = await prisma.device.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DeviceUpdateManyArgs>(
      args: SelectSubset<T, DeviceUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Device.
     * @param {DeviceUpsertArgs} args - Arguments to update or create a Device.
     * @example
     * // Update or create a Device
     * const device = await prisma.device.upsert({
     *   create: {
     *     // ... data to create a Device
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Device we want to update
     *   }
     * })
    **/
    upsert<T extends DeviceUpsertArgs>(
      args: SelectSubset<T, DeviceUpsertArgs>
    ): Prisma__DeviceClient<DeviceGetPayload<T>>

    /**
     * Count the number of Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceCountArgs} args - Arguments to filter Devices to count.
     * @example
     * // Count the number of Devices
     * const count = await prisma.device.count({
     *   where: {
     *     // ... the filter for the Devices we want to count
     *   }
     * })
    **/
    count<T extends DeviceCountArgs>(
      args?: Subset<T, DeviceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeviceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Device.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeviceAggregateArgs>(args: Subset<T, DeviceAggregateArgs>): Prisma.PrismaPromise<GetDeviceAggregateType<T>>

    /**
     * Group by Device.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeviceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeviceGroupByArgs['orderBy'] }
        : { orderBy?: DeviceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeviceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeviceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Device.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DeviceClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    quarantine<T extends Device$quarantineArgs= {}>(args?: Subset<T, Device$quarantineArgs>): Prisma.PrismaPromise<Array<ThreatGetPayload<T>>| Null>;

    connection<T extends Device$connectionArgs= {}>(args?: Subset<T, Device$connectionArgs>): Prisma.PrismaPromise<Array<ConnectionGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Device base type for findUnique actions
   */
  export type DeviceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    /**
     * Filter, which Device to fetch.
     */
    where: DeviceWhereUniqueInput
  }

  /**
   * Device findUnique
   */
  export interface DeviceFindUniqueArgs extends DeviceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Device findUniqueOrThrow
   */
  export type DeviceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    /**
     * Filter, which Device to fetch.
     */
    where: DeviceWhereUniqueInput
  }


  /**
   * Device base type for findFirst actions
   */
  export type DeviceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    /**
     * Filter, which Device to fetch.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: Enumerable<DeviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Devices.
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Devices.
     */
    distinct?: Enumerable<DeviceScalarFieldEnum>
  }

  /**
   * Device findFirst
   */
  export interface DeviceFindFirstArgs extends DeviceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Device findFirstOrThrow
   */
  export type DeviceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    /**
     * Filter, which Device to fetch.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: Enumerable<DeviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Devices.
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Devices.
     */
    distinct?: Enumerable<DeviceScalarFieldEnum>
  }


  /**
   * Device findMany
   */
  export type DeviceFindManyArgs = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    /**
     * Filter, which Devices to fetch.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: Enumerable<DeviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Devices.
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    distinct?: Enumerable<DeviceScalarFieldEnum>
  }


  /**
   * Device create
   */
  export type DeviceCreateArgs = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    /**
     * The data needed to create a Device.
     */
    data: XOR<DeviceCreateInput, DeviceUncheckedCreateInput>
  }


  /**
   * Device createMany
   */
  export type DeviceCreateManyArgs = {
    /**
     * The data used to create many Devices.
     */
    data: Enumerable<DeviceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Device update
   */
  export type DeviceUpdateArgs = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    /**
     * The data needed to update a Device.
     */
    data: XOR<DeviceUpdateInput, DeviceUncheckedUpdateInput>
    /**
     * Choose, which Device to update.
     */
    where: DeviceWhereUniqueInput
  }


  /**
   * Device updateMany
   */
  export type DeviceUpdateManyArgs = {
    /**
     * The data used to update Devices.
     */
    data: XOR<DeviceUpdateManyMutationInput, DeviceUncheckedUpdateManyInput>
    /**
     * Filter which Devices to update
     */
    where?: DeviceWhereInput
  }


  /**
   * Device upsert
   */
  export type DeviceUpsertArgs = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    /**
     * The filter to search for the Device to update in case it exists.
     */
    where: DeviceWhereUniqueInput
    /**
     * In case the Device found by the `where` argument doesn't exist, create a new Device with this data.
     */
    create: XOR<DeviceCreateInput, DeviceUncheckedCreateInput>
    /**
     * In case the Device was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeviceUpdateInput, DeviceUncheckedUpdateInput>
  }


  /**
   * Device delete
   */
  export type DeviceDeleteArgs = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    /**
     * Filter which Device to delete.
     */
    where: DeviceWhereUniqueInput
  }


  /**
   * Device deleteMany
   */
  export type DeviceDeleteManyArgs = {
    /**
     * Filter which Devices to delete
     */
    where?: DeviceWhereInput
  }


  /**
   * Device.quarantine
   */
  export type Device$quarantineArgs = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude | null
    where?: ThreatWhereInput
    orderBy?: Enumerable<ThreatOrderByWithRelationInput>
    cursor?: ThreatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ThreatScalarFieldEnum>
  }


  /**
   * Device.connection
   */
  export type Device$connectionArgs = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude | null
    where?: ConnectionWhereInput
    orderBy?: Enumerable<ConnectionOrderByWithRelationInput>
    cursor?: ConnectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ConnectionScalarFieldEnum>
  }


  /**
   * Device without action
   */
  export type DeviceArgs = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
  }



  /**
   * Model Threat
   */


  export type AggregateThreat = {
    _count: ThreatCountAggregateOutputType | null
    _min: ThreatMinAggregateOutputType | null
    _max: ThreatMaxAggregateOutputType | null
  }

  export type ThreatMinAggregateOutputType = {
    id: string | null
    deviceId: string | null
    type: ThreatType | null
  }

  export type ThreatMaxAggregateOutputType = {
    id: string | null
    deviceId: string | null
    type: ThreatType | null
  }

  export type ThreatCountAggregateOutputType = {
    id: number
    deviceId: number
    type: number
    info: number
    _all: number
  }


  export type ThreatMinAggregateInputType = {
    id?: true
    deviceId?: true
    type?: true
  }

  export type ThreatMaxAggregateInputType = {
    id?: true
    deviceId?: true
    type?: true
  }

  export type ThreatCountAggregateInputType = {
    id?: true
    deviceId?: true
    type?: true
    info?: true
    _all?: true
  }

  export type ThreatAggregateArgs = {
    /**
     * Filter which Threat to aggregate.
     */
    where?: ThreatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threats to fetch.
     */
    orderBy?: Enumerable<ThreatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThreatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Threats
    **/
    _count?: true | ThreatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThreatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThreatMaxAggregateInputType
  }

  export type GetThreatAggregateType<T extends ThreatAggregateArgs> = {
        [P in keyof T & keyof AggregateThreat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThreat[P]>
      : GetScalarType<T[P], AggregateThreat[P]>
  }




  export type ThreatGroupByArgs = {
    where?: ThreatWhereInput
    orderBy?: Enumerable<ThreatOrderByWithAggregationInput>
    by: ThreatScalarFieldEnum[]
    having?: ThreatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThreatCountAggregateInputType | true
    _min?: ThreatMinAggregateInputType
    _max?: ThreatMaxAggregateInputType
  }


  export type ThreatGroupByOutputType = {
    id: string
    deviceId: string
    type: ThreatType
    info: JsonValue
    _count: ThreatCountAggregateOutputType | null
    _min: ThreatMinAggregateOutputType | null
    _max: ThreatMaxAggregateOutputType | null
  }

  type GetThreatGroupByPayload<T extends ThreatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ThreatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThreatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThreatGroupByOutputType[P]>
            : GetScalarType<T[P], ThreatGroupByOutputType[P]>
        }
      >
    >


  export type ThreatSelect = {
    id?: boolean
    deviceId?: boolean
    type?: boolean
    info?: boolean
    device?: boolean | DeviceArgs
  }


  export type ThreatInclude = {
    device?: boolean | DeviceArgs
  }

  export type ThreatGetPayload<S extends boolean | null | undefined | ThreatArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Threat :
    S extends undefined ? never :
    S extends { include: any } & (ThreatArgs | ThreatFindManyArgs)
    ? Threat  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'device' ? DeviceGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ThreatArgs | ThreatFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'device' ? DeviceGetPayload<S['select'][P]> :  P extends keyof Threat ? Threat[P] : never
  } 
      : Threat


  type ThreatCountArgs = 
    Omit<ThreatFindManyArgs, 'select' | 'include'> & {
      select?: ThreatCountAggregateInputType | true
    }

  export interface ThreatDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Threat that matches the filter.
     * @param {ThreatFindUniqueArgs} args - Arguments to find a Threat
     * @example
     * // Get one Threat
     * const threat = await prisma.threat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ThreatFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ThreatFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Threat'> extends True ? Prisma__ThreatClient<ThreatGetPayload<T>> : Prisma__ThreatClient<ThreatGetPayload<T> | null, null>

    /**
     * Find one Threat that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ThreatFindUniqueOrThrowArgs} args - Arguments to find a Threat
     * @example
     * // Get one Threat
     * const threat = await prisma.threat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ThreatFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ThreatFindUniqueOrThrowArgs>
    ): Prisma__ThreatClient<ThreatGetPayload<T>>

    /**
     * Find the first Threat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreatFindFirstArgs} args - Arguments to find a Threat
     * @example
     * // Get one Threat
     * const threat = await prisma.threat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ThreatFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ThreatFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Threat'> extends True ? Prisma__ThreatClient<ThreatGetPayload<T>> : Prisma__ThreatClient<ThreatGetPayload<T> | null, null>

    /**
     * Find the first Threat that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreatFindFirstOrThrowArgs} args - Arguments to find a Threat
     * @example
     * // Get one Threat
     * const threat = await prisma.threat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ThreatFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ThreatFindFirstOrThrowArgs>
    ): Prisma__ThreatClient<ThreatGetPayload<T>>

    /**
     * Find zero or more Threats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Threats
     * const threats = await prisma.threat.findMany()
     * 
     * // Get first 10 Threats
     * const threats = await prisma.threat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const threatWithIdOnly = await prisma.threat.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ThreatFindManyArgs>(
      args?: SelectSubset<T, ThreatFindManyArgs>
    ): Prisma.PrismaPromise<Array<ThreatGetPayload<T>>>

    /**
     * Create a Threat.
     * @param {ThreatCreateArgs} args - Arguments to create a Threat.
     * @example
     * // Create one Threat
     * const Threat = await prisma.threat.create({
     *   data: {
     *     // ... data to create a Threat
     *   }
     * })
     * 
    **/
    create<T extends ThreatCreateArgs>(
      args: SelectSubset<T, ThreatCreateArgs>
    ): Prisma__ThreatClient<ThreatGetPayload<T>>

    /**
     * Create many Threats.
     *     @param {ThreatCreateManyArgs} args - Arguments to create many Threats.
     *     @example
     *     // Create many Threats
     *     const threat = await prisma.threat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ThreatCreateManyArgs>(
      args?: SelectSubset<T, ThreatCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Threat.
     * @param {ThreatDeleteArgs} args - Arguments to delete one Threat.
     * @example
     * // Delete one Threat
     * const Threat = await prisma.threat.delete({
     *   where: {
     *     // ... filter to delete one Threat
     *   }
     * })
     * 
    **/
    delete<T extends ThreatDeleteArgs>(
      args: SelectSubset<T, ThreatDeleteArgs>
    ): Prisma__ThreatClient<ThreatGetPayload<T>>

    /**
     * Update one Threat.
     * @param {ThreatUpdateArgs} args - Arguments to update one Threat.
     * @example
     * // Update one Threat
     * const threat = await prisma.threat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ThreatUpdateArgs>(
      args: SelectSubset<T, ThreatUpdateArgs>
    ): Prisma__ThreatClient<ThreatGetPayload<T>>

    /**
     * Delete zero or more Threats.
     * @param {ThreatDeleteManyArgs} args - Arguments to filter Threats to delete.
     * @example
     * // Delete a few Threats
     * const { count } = await prisma.threat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ThreatDeleteManyArgs>(
      args?: SelectSubset<T, ThreatDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Threats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Threats
     * const threat = await prisma.threat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ThreatUpdateManyArgs>(
      args: SelectSubset<T, ThreatUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Threat.
     * @param {ThreatUpsertArgs} args - Arguments to update or create a Threat.
     * @example
     * // Update or create a Threat
     * const threat = await prisma.threat.upsert({
     *   create: {
     *     // ... data to create a Threat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Threat we want to update
     *   }
     * })
    **/
    upsert<T extends ThreatUpsertArgs>(
      args: SelectSubset<T, ThreatUpsertArgs>
    ): Prisma__ThreatClient<ThreatGetPayload<T>>

    /**
     * Count the number of Threats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreatCountArgs} args - Arguments to filter Threats to count.
     * @example
     * // Count the number of Threats
     * const count = await prisma.threat.count({
     *   where: {
     *     // ... the filter for the Threats we want to count
     *   }
     * })
    **/
    count<T extends ThreatCountArgs>(
      args?: Subset<T, ThreatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThreatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Threat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThreatAggregateArgs>(args: Subset<T, ThreatAggregateArgs>): Prisma.PrismaPromise<GetThreatAggregateType<T>>

    /**
     * Group by Threat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThreatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThreatGroupByArgs['orderBy'] }
        : { orderBy?: ThreatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThreatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThreatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Threat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ThreatClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    device<T extends DeviceArgs= {}>(args?: Subset<T, DeviceArgs>): Prisma__DeviceClient<DeviceGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Threat base type for findUnique actions
   */
  export type ThreatFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude | null
    /**
     * Filter, which Threat to fetch.
     */
    where: ThreatWhereUniqueInput
  }

  /**
   * Threat findUnique
   */
  export interface ThreatFindUniqueArgs extends ThreatFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Threat findUniqueOrThrow
   */
  export type ThreatFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude | null
    /**
     * Filter, which Threat to fetch.
     */
    where: ThreatWhereUniqueInput
  }


  /**
   * Threat base type for findFirst actions
   */
  export type ThreatFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude | null
    /**
     * Filter, which Threat to fetch.
     */
    where?: ThreatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threats to fetch.
     */
    orderBy?: Enumerable<ThreatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Threats.
     */
    cursor?: ThreatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Threats.
     */
    distinct?: Enumerable<ThreatScalarFieldEnum>
  }

  /**
   * Threat findFirst
   */
  export interface ThreatFindFirstArgs extends ThreatFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Threat findFirstOrThrow
   */
  export type ThreatFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude | null
    /**
     * Filter, which Threat to fetch.
     */
    where?: ThreatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threats to fetch.
     */
    orderBy?: Enumerable<ThreatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Threats.
     */
    cursor?: ThreatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Threats.
     */
    distinct?: Enumerable<ThreatScalarFieldEnum>
  }


  /**
   * Threat findMany
   */
  export type ThreatFindManyArgs = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude | null
    /**
     * Filter, which Threats to fetch.
     */
    where?: ThreatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threats to fetch.
     */
    orderBy?: Enumerable<ThreatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Threats.
     */
    cursor?: ThreatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threats.
     */
    skip?: number
    distinct?: Enumerable<ThreatScalarFieldEnum>
  }


  /**
   * Threat create
   */
  export type ThreatCreateArgs = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude | null
    /**
     * The data needed to create a Threat.
     */
    data: XOR<ThreatCreateInput, ThreatUncheckedCreateInput>
  }


  /**
   * Threat createMany
   */
  export type ThreatCreateManyArgs = {
    /**
     * The data used to create many Threats.
     */
    data: Enumerable<ThreatCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Threat update
   */
  export type ThreatUpdateArgs = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude | null
    /**
     * The data needed to update a Threat.
     */
    data: XOR<ThreatUpdateInput, ThreatUncheckedUpdateInput>
    /**
     * Choose, which Threat to update.
     */
    where: ThreatWhereUniqueInput
  }


  /**
   * Threat updateMany
   */
  export type ThreatUpdateManyArgs = {
    /**
     * The data used to update Threats.
     */
    data: XOR<ThreatUpdateManyMutationInput, ThreatUncheckedUpdateManyInput>
    /**
     * Filter which Threats to update
     */
    where?: ThreatWhereInput
  }


  /**
   * Threat upsert
   */
  export type ThreatUpsertArgs = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude | null
    /**
     * The filter to search for the Threat to update in case it exists.
     */
    where: ThreatWhereUniqueInput
    /**
     * In case the Threat found by the `where` argument doesn't exist, create a new Threat with this data.
     */
    create: XOR<ThreatCreateInput, ThreatUncheckedCreateInput>
    /**
     * In case the Threat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThreatUpdateInput, ThreatUncheckedUpdateInput>
  }


  /**
   * Threat delete
   */
  export type ThreatDeleteArgs = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude | null
    /**
     * Filter which Threat to delete.
     */
    where: ThreatWhereUniqueInput
  }


  /**
   * Threat deleteMany
   */
  export type ThreatDeleteManyArgs = {
    /**
     * Filter which Threats to delete
     */
    where?: ThreatWhereInput
  }


  /**
   * Threat without action
   */
  export type ThreatArgs = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude | null
  }



  /**
   * Model Connection
   */


  export type AggregateConnection = {
    _count: ConnectionCountAggregateOutputType | null
    _min: ConnectionMinAggregateOutputType | null
    _max: ConnectionMaxAggregateOutputType | null
  }

  export type ConnectionMinAggregateOutputType = {
    id: string | null
    connectionStatus: ConnectionStatus | null
  }

  export type ConnectionMaxAggregateOutputType = {
    id: string | null
    connectionStatus: ConnectionStatus | null
  }

  export type ConnectionCountAggregateOutputType = {
    id: number
    connectionStatus: number
    _all: number
  }


  export type ConnectionMinAggregateInputType = {
    id?: true
    connectionStatus?: true
  }

  export type ConnectionMaxAggregateInputType = {
    id?: true
    connectionStatus?: true
  }

  export type ConnectionCountAggregateInputType = {
    id?: true
    connectionStatus?: true
    _all?: true
  }

  export type ConnectionAggregateArgs = {
    /**
     * Filter which Connection to aggregate.
     */
    where?: ConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Connections to fetch.
     */
    orderBy?: Enumerable<ConnectionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Connections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Connections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Connections
    **/
    _count?: true | ConnectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConnectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConnectionMaxAggregateInputType
  }

  export type GetConnectionAggregateType<T extends ConnectionAggregateArgs> = {
        [P in keyof T & keyof AggregateConnection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConnection[P]>
      : GetScalarType<T[P], AggregateConnection[P]>
  }




  export type ConnectionGroupByArgs = {
    where?: ConnectionWhereInput
    orderBy?: Enumerable<ConnectionOrderByWithAggregationInput>
    by: ConnectionScalarFieldEnum[]
    having?: ConnectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConnectionCountAggregateInputType | true
    _min?: ConnectionMinAggregateInputType
    _max?: ConnectionMaxAggregateInputType
  }


  export type ConnectionGroupByOutputType = {
    id: string
    connectionStatus: ConnectionStatus
    _count: ConnectionCountAggregateOutputType | null
    _min: ConnectionMinAggregateOutputType | null
    _max: ConnectionMaxAggregateOutputType | null
  }

  type GetConnectionGroupByPayload<T extends ConnectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ConnectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConnectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConnectionGroupByOutputType[P]>
            : GetScalarType<T[P], ConnectionGroupByOutputType[P]>
        }
      >
    >


  export type ConnectionSelect = {
    id?: boolean
    connectionStatus?: boolean
    req?: boolean | Connection$reqArgs
    res?: boolean | Connection$resArgs
    device?: boolean | Connection$deviceArgs
    _count?: boolean | ConnectionCountOutputTypeArgs
  }


  export type ConnectionInclude = {
    req?: boolean | Connection$reqArgs
    res?: boolean | Connection$resArgs
    device?: boolean | Connection$deviceArgs
    _count?: boolean | ConnectionCountOutputTypeArgs
  }

  export type ConnectionGetPayload<S extends boolean | null | undefined | ConnectionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Connection :
    S extends undefined ? never :
    S extends { include: any } & (ConnectionArgs | ConnectionFindManyArgs)
    ? Connection  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'req' ? Array < ReqGetPayload<S['include'][P]>>  :
        P extends 'res' ? Array < ResGetPayload<S['include'][P]>>  :
        P extends 'device' ? Array < DeviceGetPayload<S['include'][P]>>  :
        P extends '_count' ? ConnectionCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ConnectionArgs | ConnectionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'req' ? Array < ReqGetPayload<S['select'][P]>>  :
        P extends 'res' ? Array < ResGetPayload<S['select'][P]>>  :
        P extends 'device' ? Array < DeviceGetPayload<S['select'][P]>>  :
        P extends '_count' ? ConnectionCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Connection ? Connection[P] : never
  } 
      : Connection


  type ConnectionCountArgs = 
    Omit<ConnectionFindManyArgs, 'select' | 'include'> & {
      select?: ConnectionCountAggregateInputType | true
    }

  export interface ConnectionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Connection that matches the filter.
     * @param {ConnectionFindUniqueArgs} args - Arguments to find a Connection
     * @example
     * // Get one Connection
     * const connection = await prisma.connection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ConnectionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ConnectionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Connection'> extends True ? Prisma__ConnectionClient<ConnectionGetPayload<T>> : Prisma__ConnectionClient<ConnectionGetPayload<T> | null, null>

    /**
     * Find one Connection that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ConnectionFindUniqueOrThrowArgs} args - Arguments to find a Connection
     * @example
     * // Get one Connection
     * const connection = await prisma.connection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ConnectionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ConnectionFindUniqueOrThrowArgs>
    ): Prisma__ConnectionClient<ConnectionGetPayload<T>>

    /**
     * Find the first Connection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionFindFirstArgs} args - Arguments to find a Connection
     * @example
     * // Get one Connection
     * const connection = await prisma.connection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ConnectionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ConnectionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Connection'> extends True ? Prisma__ConnectionClient<ConnectionGetPayload<T>> : Prisma__ConnectionClient<ConnectionGetPayload<T> | null, null>

    /**
     * Find the first Connection that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionFindFirstOrThrowArgs} args - Arguments to find a Connection
     * @example
     * // Get one Connection
     * const connection = await prisma.connection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ConnectionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ConnectionFindFirstOrThrowArgs>
    ): Prisma__ConnectionClient<ConnectionGetPayload<T>>

    /**
     * Find zero or more Connections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Connections
     * const connections = await prisma.connection.findMany()
     * 
     * // Get first 10 Connections
     * const connections = await prisma.connection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const connectionWithIdOnly = await prisma.connection.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ConnectionFindManyArgs>(
      args?: SelectSubset<T, ConnectionFindManyArgs>
    ): Prisma.PrismaPromise<Array<ConnectionGetPayload<T>>>

    /**
     * Create a Connection.
     * @param {ConnectionCreateArgs} args - Arguments to create a Connection.
     * @example
     * // Create one Connection
     * const Connection = await prisma.connection.create({
     *   data: {
     *     // ... data to create a Connection
     *   }
     * })
     * 
    **/
    create<T extends ConnectionCreateArgs>(
      args: SelectSubset<T, ConnectionCreateArgs>
    ): Prisma__ConnectionClient<ConnectionGetPayload<T>>

    /**
     * Create many Connections.
     *     @param {ConnectionCreateManyArgs} args - Arguments to create many Connections.
     *     @example
     *     // Create many Connections
     *     const connection = await prisma.connection.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ConnectionCreateManyArgs>(
      args?: SelectSubset<T, ConnectionCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Connection.
     * @param {ConnectionDeleteArgs} args - Arguments to delete one Connection.
     * @example
     * // Delete one Connection
     * const Connection = await prisma.connection.delete({
     *   where: {
     *     // ... filter to delete one Connection
     *   }
     * })
     * 
    **/
    delete<T extends ConnectionDeleteArgs>(
      args: SelectSubset<T, ConnectionDeleteArgs>
    ): Prisma__ConnectionClient<ConnectionGetPayload<T>>

    /**
     * Update one Connection.
     * @param {ConnectionUpdateArgs} args - Arguments to update one Connection.
     * @example
     * // Update one Connection
     * const connection = await prisma.connection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ConnectionUpdateArgs>(
      args: SelectSubset<T, ConnectionUpdateArgs>
    ): Prisma__ConnectionClient<ConnectionGetPayload<T>>

    /**
     * Delete zero or more Connections.
     * @param {ConnectionDeleteManyArgs} args - Arguments to filter Connections to delete.
     * @example
     * // Delete a few Connections
     * const { count } = await prisma.connection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ConnectionDeleteManyArgs>(
      args?: SelectSubset<T, ConnectionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Connections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Connections
     * const connection = await prisma.connection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ConnectionUpdateManyArgs>(
      args: SelectSubset<T, ConnectionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Connection.
     * @param {ConnectionUpsertArgs} args - Arguments to update or create a Connection.
     * @example
     * // Update or create a Connection
     * const connection = await prisma.connection.upsert({
     *   create: {
     *     // ... data to create a Connection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Connection we want to update
     *   }
     * })
    **/
    upsert<T extends ConnectionUpsertArgs>(
      args: SelectSubset<T, ConnectionUpsertArgs>
    ): Prisma__ConnectionClient<ConnectionGetPayload<T>>

    /**
     * Count the number of Connections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionCountArgs} args - Arguments to filter Connections to count.
     * @example
     * // Count the number of Connections
     * const count = await prisma.connection.count({
     *   where: {
     *     // ... the filter for the Connections we want to count
     *   }
     * })
    **/
    count<T extends ConnectionCountArgs>(
      args?: Subset<T, ConnectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConnectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Connection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConnectionAggregateArgs>(args: Subset<T, ConnectionAggregateArgs>): Prisma.PrismaPromise<GetConnectionAggregateType<T>>

    /**
     * Group by Connection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConnectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConnectionGroupByArgs['orderBy'] }
        : { orderBy?: ConnectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConnectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConnectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Connection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ConnectionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    req<T extends Connection$reqArgs= {}>(args?: Subset<T, Connection$reqArgs>): Prisma.PrismaPromise<Array<ReqGetPayload<T>>| Null>;

    res<T extends Connection$resArgs= {}>(args?: Subset<T, Connection$resArgs>): Prisma.PrismaPromise<Array<ResGetPayload<T>>| Null>;

    device<T extends Connection$deviceArgs= {}>(args?: Subset<T, Connection$deviceArgs>): Prisma.PrismaPromise<Array<DeviceGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Connection base type for findUnique actions
   */
  export type ConnectionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude | null
    /**
     * Filter, which Connection to fetch.
     */
    where: ConnectionWhereUniqueInput
  }

  /**
   * Connection findUnique
   */
  export interface ConnectionFindUniqueArgs extends ConnectionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Connection findUniqueOrThrow
   */
  export type ConnectionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude | null
    /**
     * Filter, which Connection to fetch.
     */
    where: ConnectionWhereUniqueInput
  }


  /**
   * Connection base type for findFirst actions
   */
  export type ConnectionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude | null
    /**
     * Filter, which Connection to fetch.
     */
    where?: ConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Connections to fetch.
     */
    orderBy?: Enumerable<ConnectionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Connections.
     */
    cursor?: ConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Connections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Connections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Connections.
     */
    distinct?: Enumerable<ConnectionScalarFieldEnum>
  }

  /**
   * Connection findFirst
   */
  export interface ConnectionFindFirstArgs extends ConnectionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Connection findFirstOrThrow
   */
  export type ConnectionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude | null
    /**
     * Filter, which Connection to fetch.
     */
    where?: ConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Connections to fetch.
     */
    orderBy?: Enumerable<ConnectionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Connections.
     */
    cursor?: ConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Connections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Connections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Connections.
     */
    distinct?: Enumerable<ConnectionScalarFieldEnum>
  }


  /**
   * Connection findMany
   */
  export type ConnectionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude | null
    /**
     * Filter, which Connections to fetch.
     */
    where?: ConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Connections to fetch.
     */
    orderBy?: Enumerable<ConnectionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Connections.
     */
    cursor?: ConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Connections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Connections.
     */
    skip?: number
    distinct?: Enumerable<ConnectionScalarFieldEnum>
  }


  /**
   * Connection create
   */
  export type ConnectionCreateArgs = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude | null
    /**
     * The data needed to create a Connection.
     */
    data: XOR<ConnectionCreateInput, ConnectionUncheckedCreateInput>
  }


  /**
   * Connection createMany
   */
  export type ConnectionCreateManyArgs = {
    /**
     * The data used to create many Connections.
     */
    data: Enumerable<ConnectionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Connection update
   */
  export type ConnectionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude | null
    /**
     * The data needed to update a Connection.
     */
    data: XOR<ConnectionUpdateInput, ConnectionUncheckedUpdateInput>
    /**
     * Choose, which Connection to update.
     */
    where: ConnectionWhereUniqueInput
  }


  /**
   * Connection updateMany
   */
  export type ConnectionUpdateManyArgs = {
    /**
     * The data used to update Connections.
     */
    data: XOR<ConnectionUpdateManyMutationInput, ConnectionUncheckedUpdateManyInput>
    /**
     * Filter which Connections to update
     */
    where?: ConnectionWhereInput
  }


  /**
   * Connection upsert
   */
  export type ConnectionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude | null
    /**
     * The filter to search for the Connection to update in case it exists.
     */
    where: ConnectionWhereUniqueInput
    /**
     * In case the Connection found by the `where` argument doesn't exist, create a new Connection with this data.
     */
    create: XOR<ConnectionCreateInput, ConnectionUncheckedCreateInput>
    /**
     * In case the Connection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConnectionUpdateInput, ConnectionUncheckedUpdateInput>
  }


  /**
   * Connection delete
   */
  export type ConnectionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude | null
    /**
     * Filter which Connection to delete.
     */
    where: ConnectionWhereUniqueInput
  }


  /**
   * Connection deleteMany
   */
  export type ConnectionDeleteManyArgs = {
    /**
     * Filter which Connections to delete
     */
    where?: ConnectionWhereInput
  }


  /**
   * Connection.req
   */
  export type Connection$reqArgs = {
    /**
     * Select specific fields to fetch from the Req
     */
    select?: ReqSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReqInclude | null
    where?: ReqWhereInput
    orderBy?: Enumerable<ReqOrderByWithRelationInput>
    cursor?: ReqWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ReqScalarFieldEnum>
  }


  /**
   * Connection.res
   */
  export type Connection$resArgs = {
    /**
     * Select specific fields to fetch from the Res
     */
    select?: ResSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResInclude | null
    where?: ResWhereInput
    orderBy?: Enumerable<ResOrderByWithRelationInput>
    cursor?: ResWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ResScalarFieldEnum>
  }


  /**
   * Connection.device
   */
  export type Connection$deviceArgs = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    where?: DeviceWhereInput
    orderBy?: Enumerable<DeviceOrderByWithRelationInput>
    cursor?: DeviceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DeviceScalarFieldEnum>
  }


  /**
   * Connection without action
   */
  export type ConnectionArgs = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude | null
  }



  /**
   * Model Req
   */


  export type AggregateReq = {
    _count: ReqCountAggregateOutputType | null
    _min: ReqMinAggregateOutputType | null
    _max: ReqMaxAggregateOutputType | null
  }

  export type ReqMinAggregateOutputType = {
    id: string | null
    connectionId: string | null
    senderDeviceId: string | null
    receiverDeviceId: string | null
  }

  export type ReqMaxAggregateOutputType = {
    id: string | null
    connectionId: string | null
    senderDeviceId: string | null
    receiverDeviceId: string | null
  }

  export type ReqCountAggregateOutputType = {
    id: number
    connectionId: number
    senderDeviceId: number
    receiverDeviceId: number
    reqExpress: number
    _all: number
  }


  export type ReqMinAggregateInputType = {
    id?: true
    connectionId?: true
    senderDeviceId?: true
    receiverDeviceId?: true
  }

  export type ReqMaxAggregateInputType = {
    id?: true
    connectionId?: true
    senderDeviceId?: true
    receiverDeviceId?: true
  }

  export type ReqCountAggregateInputType = {
    id?: true
    connectionId?: true
    senderDeviceId?: true
    receiverDeviceId?: true
    reqExpress?: true
    _all?: true
  }

  export type ReqAggregateArgs = {
    /**
     * Filter which Req to aggregate.
     */
    where?: ReqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reqs to fetch.
     */
    orderBy?: Enumerable<ReqOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reqs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reqs
    **/
    _count?: true | ReqCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReqMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReqMaxAggregateInputType
  }

  export type GetReqAggregateType<T extends ReqAggregateArgs> = {
        [P in keyof T & keyof AggregateReq]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReq[P]>
      : GetScalarType<T[P], AggregateReq[P]>
  }




  export type ReqGroupByArgs = {
    where?: ReqWhereInput
    orderBy?: Enumerable<ReqOrderByWithAggregationInput>
    by: ReqScalarFieldEnum[]
    having?: ReqScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReqCountAggregateInputType | true
    _min?: ReqMinAggregateInputType
    _max?: ReqMaxAggregateInputType
  }


  export type ReqGroupByOutputType = {
    id: string
    connectionId: string
    senderDeviceId: string
    receiverDeviceId: string
    reqExpress: JsonValue
    _count: ReqCountAggregateOutputType | null
    _min: ReqMinAggregateOutputType | null
    _max: ReqMaxAggregateOutputType | null
  }

  type GetReqGroupByPayload<T extends ReqGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ReqGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReqGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReqGroupByOutputType[P]>
            : GetScalarType<T[P], ReqGroupByOutputType[P]>
        }
      >
    >


  export type ReqSelect = {
    id?: boolean
    connectionId?: boolean
    senderDeviceId?: boolean
    receiverDeviceId?: boolean
    reqExpress?: boolean
    connection?: boolean | ConnectionArgs
  }


  export type ReqInclude = {
    connection?: boolean | ConnectionArgs
  }

  export type ReqGetPayload<S extends boolean | null | undefined | ReqArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Req :
    S extends undefined ? never :
    S extends { include: any } & (ReqArgs | ReqFindManyArgs)
    ? Req  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'connection' ? ConnectionGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ReqArgs | ReqFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'connection' ? ConnectionGetPayload<S['select'][P]> :  P extends keyof Req ? Req[P] : never
  } 
      : Req


  type ReqCountArgs = 
    Omit<ReqFindManyArgs, 'select' | 'include'> & {
      select?: ReqCountAggregateInputType | true
    }

  export interface ReqDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Req that matches the filter.
     * @param {ReqFindUniqueArgs} args - Arguments to find a Req
     * @example
     * // Get one Req
     * const req = await prisma.req.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReqFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReqFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Req'> extends True ? Prisma__ReqClient<ReqGetPayload<T>> : Prisma__ReqClient<ReqGetPayload<T> | null, null>

    /**
     * Find one Req that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReqFindUniqueOrThrowArgs} args - Arguments to find a Req
     * @example
     * // Get one Req
     * const req = await prisma.req.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReqFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ReqFindUniqueOrThrowArgs>
    ): Prisma__ReqClient<ReqGetPayload<T>>

    /**
     * Find the first Req that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReqFindFirstArgs} args - Arguments to find a Req
     * @example
     * // Get one Req
     * const req = await prisma.req.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReqFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReqFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Req'> extends True ? Prisma__ReqClient<ReqGetPayload<T>> : Prisma__ReqClient<ReqGetPayload<T> | null, null>

    /**
     * Find the first Req that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReqFindFirstOrThrowArgs} args - Arguments to find a Req
     * @example
     * // Get one Req
     * const req = await prisma.req.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReqFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ReqFindFirstOrThrowArgs>
    ): Prisma__ReqClient<ReqGetPayload<T>>

    /**
     * Find zero or more Reqs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReqFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reqs
     * const reqs = await prisma.req.findMany()
     * 
     * // Get first 10 Reqs
     * const reqs = await prisma.req.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reqWithIdOnly = await prisma.req.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReqFindManyArgs>(
      args?: SelectSubset<T, ReqFindManyArgs>
    ): Prisma.PrismaPromise<Array<ReqGetPayload<T>>>

    /**
     * Create a Req.
     * @param {ReqCreateArgs} args - Arguments to create a Req.
     * @example
     * // Create one Req
     * const Req = await prisma.req.create({
     *   data: {
     *     // ... data to create a Req
     *   }
     * })
     * 
    **/
    create<T extends ReqCreateArgs>(
      args: SelectSubset<T, ReqCreateArgs>
    ): Prisma__ReqClient<ReqGetPayload<T>>

    /**
     * Create many Reqs.
     *     @param {ReqCreateManyArgs} args - Arguments to create many Reqs.
     *     @example
     *     // Create many Reqs
     *     const req = await prisma.req.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReqCreateManyArgs>(
      args?: SelectSubset<T, ReqCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Req.
     * @param {ReqDeleteArgs} args - Arguments to delete one Req.
     * @example
     * // Delete one Req
     * const Req = await prisma.req.delete({
     *   where: {
     *     // ... filter to delete one Req
     *   }
     * })
     * 
    **/
    delete<T extends ReqDeleteArgs>(
      args: SelectSubset<T, ReqDeleteArgs>
    ): Prisma__ReqClient<ReqGetPayload<T>>

    /**
     * Update one Req.
     * @param {ReqUpdateArgs} args - Arguments to update one Req.
     * @example
     * // Update one Req
     * const req = await prisma.req.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReqUpdateArgs>(
      args: SelectSubset<T, ReqUpdateArgs>
    ): Prisma__ReqClient<ReqGetPayload<T>>

    /**
     * Delete zero or more Reqs.
     * @param {ReqDeleteManyArgs} args - Arguments to filter Reqs to delete.
     * @example
     * // Delete a few Reqs
     * const { count } = await prisma.req.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReqDeleteManyArgs>(
      args?: SelectSubset<T, ReqDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reqs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReqUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reqs
     * const req = await prisma.req.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReqUpdateManyArgs>(
      args: SelectSubset<T, ReqUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Req.
     * @param {ReqUpsertArgs} args - Arguments to update or create a Req.
     * @example
     * // Update or create a Req
     * const req = await prisma.req.upsert({
     *   create: {
     *     // ... data to create a Req
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Req we want to update
     *   }
     * })
    **/
    upsert<T extends ReqUpsertArgs>(
      args: SelectSubset<T, ReqUpsertArgs>
    ): Prisma__ReqClient<ReqGetPayload<T>>

    /**
     * Count the number of Reqs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReqCountArgs} args - Arguments to filter Reqs to count.
     * @example
     * // Count the number of Reqs
     * const count = await prisma.req.count({
     *   where: {
     *     // ... the filter for the Reqs we want to count
     *   }
     * })
    **/
    count<T extends ReqCountArgs>(
      args?: Subset<T, ReqCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReqCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Req.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReqAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReqAggregateArgs>(args: Subset<T, ReqAggregateArgs>): Prisma.PrismaPromise<GetReqAggregateType<T>>

    /**
     * Group by Req.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReqGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReqGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReqGroupByArgs['orderBy'] }
        : { orderBy?: ReqGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReqGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReqGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Req.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReqClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    connection<T extends ConnectionArgs= {}>(args?: Subset<T, ConnectionArgs>): Prisma__ConnectionClient<ConnectionGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Req base type for findUnique actions
   */
  export type ReqFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Req
     */
    select?: ReqSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReqInclude | null
    /**
     * Filter, which Req to fetch.
     */
    where: ReqWhereUniqueInput
  }

  /**
   * Req findUnique
   */
  export interface ReqFindUniqueArgs extends ReqFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Req findUniqueOrThrow
   */
  export type ReqFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Req
     */
    select?: ReqSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReqInclude | null
    /**
     * Filter, which Req to fetch.
     */
    where: ReqWhereUniqueInput
  }


  /**
   * Req base type for findFirst actions
   */
  export type ReqFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Req
     */
    select?: ReqSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReqInclude | null
    /**
     * Filter, which Req to fetch.
     */
    where?: ReqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reqs to fetch.
     */
    orderBy?: Enumerable<ReqOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reqs.
     */
    cursor?: ReqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reqs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reqs.
     */
    distinct?: Enumerable<ReqScalarFieldEnum>
  }

  /**
   * Req findFirst
   */
  export interface ReqFindFirstArgs extends ReqFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Req findFirstOrThrow
   */
  export type ReqFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Req
     */
    select?: ReqSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReqInclude | null
    /**
     * Filter, which Req to fetch.
     */
    where?: ReqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reqs to fetch.
     */
    orderBy?: Enumerable<ReqOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reqs.
     */
    cursor?: ReqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reqs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reqs.
     */
    distinct?: Enumerable<ReqScalarFieldEnum>
  }


  /**
   * Req findMany
   */
  export type ReqFindManyArgs = {
    /**
     * Select specific fields to fetch from the Req
     */
    select?: ReqSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReqInclude | null
    /**
     * Filter, which Reqs to fetch.
     */
    where?: ReqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reqs to fetch.
     */
    orderBy?: Enumerable<ReqOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reqs.
     */
    cursor?: ReqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reqs.
     */
    skip?: number
    distinct?: Enumerable<ReqScalarFieldEnum>
  }


  /**
   * Req create
   */
  export type ReqCreateArgs = {
    /**
     * Select specific fields to fetch from the Req
     */
    select?: ReqSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReqInclude | null
    /**
     * The data needed to create a Req.
     */
    data: XOR<ReqCreateInput, ReqUncheckedCreateInput>
  }


  /**
   * Req createMany
   */
  export type ReqCreateManyArgs = {
    /**
     * The data used to create many Reqs.
     */
    data: Enumerable<ReqCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Req update
   */
  export type ReqUpdateArgs = {
    /**
     * Select specific fields to fetch from the Req
     */
    select?: ReqSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReqInclude | null
    /**
     * The data needed to update a Req.
     */
    data: XOR<ReqUpdateInput, ReqUncheckedUpdateInput>
    /**
     * Choose, which Req to update.
     */
    where: ReqWhereUniqueInput
  }


  /**
   * Req updateMany
   */
  export type ReqUpdateManyArgs = {
    /**
     * The data used to update Reqs.
     */
    data: XOR<ReqUpdateManyMutationInput, ReqUncheckedUpdateManyInput>
    /**
     * Filter which Reqs to update
     */
    where?: ReqWhereInput
  }


  /**
   * Req upsert
   */
  export type ReqUpsertArgs = {
    /**
     * Select specific fields to fetch from the Req
     */
    select?: ReqSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReqInclude | null
    /**
     * The filter to search for the Req to update in case it exists.
     */
    where: ReqWhereUniqueInput
    /**
     * In case the Req found by the `where` argument doesn't exist, create a new Req with this data.
     */
    create: XOR<ReqCreateInput, ReqUncheckedCreateInput>
    /**
     * In case the Req was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReqUpdateInput, ReqUncheckedUpdateInput>
  }


  /**
   * Req delete
   */
  export type ReqDeleteArgs = {
    /**
     * Select specific fields to fetch from the Req
     */
    select?: ReqSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReqInclude | null
    /**
     * Filter which Req to delete.
     */
    where: ReqWhereUniqueInput
  }


  /**
   * Req deleteMany
   */
  export type ReqDeleteManyArgs = {
    /**
     * Filter which Reqs to delete
     */
    where?: ReqWhereInput
  }


  /**
   * Req without action
   */
  export type ReqArgs = {
    /**
     * Select specific fields to fetch from the Req
     */
    select?: ReqSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReqInclude | null
  }



  /**
   * Model Res
   */


  export type AggregateRes = {
    _count: ResCountAggregateOutputType | null
    _min: ResMinAggregateOutputType | null
    _max: ResMaxAggregateOutputType | null
  }

  export type ResMinAggregateOutputType = {
    id: string | null
    connectionId: string | null
    senderDeviceId: string | null
    receiverDeviceId: string | null
  }

  export type ResMaxAggregateOutputType = {
    id: string | null
    connectionId: string | null
    senderDeviceId: string | null
    receiverDeviceId: string | null
  }

  export type ResCountAggregateOutputType = {
    id: number
    connectionId: number
    senderDeviceId: number
    receiverDeviceId: number
    resExpress: number
    _all: number
  }


  export type ResMinAggregateInputType = {
    id?: true
    connectionId?: true
    senderDeviceId?: true
    receiverDeviceId?: true
  }

  export type ResMaxAggregateInputType = {
    id?: true
    connectionId?: true
    senderDeviceId?: true
    receiverDeviceId?: true
  }

  export type ResCountAggregateInputType = {
    id?: true
    connectionId?: true
    senderDeviceId?: true
    receiverDeviceId?: true
    resExpress?: true
    _all?: true
  }

  export type ResAggregateArgs = {
    /**
     * Filter which Res to aggregate.
     */
    where?: ResWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Res to fetch.
     */
    orderBy?: Enumerable<ResOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Res from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Res.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Res
    **/
    _count?: true | ResCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResMaxAggregateInputType
  }

  export type GetResAggregateType<T extends ResAggregateArgs> = {
        [P in keyof T & keyof AggregateRes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRes[P]>
      : GetScalarType<T[P], AggregateRes[P]>
  }




  export type ResGroupByArgs = {
    where?: ResWhereInput
    orderBy?: Enumerable<ResOrderByWithAggregationInput>
    by: ResScalarFieldEnum[]
    having?: ResScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResCountAggregateInputType | true
    _min?: ResMinAggregateInputType
    _max?: ResMaxAggregateInputType
  }


  export type ResGroupByOutputType = {
    id: string
    connectionId: string
    senderDeviceId: string
    receiverDeviceId: string
    resExpress: JsonValue
    _count: ResCountAggregateOutputType | null
    _min: ResMinAggregateOutputType | null
    _max: ResMaxAggregateOutputType | null
  }

  type GetResGroupByPayload<T extends ResGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ResGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResGroupByOutputType[P]>
            : GetScalarType<T[P], ResGroupByOutputType[P]>
        }
      >
    >


  export type ResSelect = {
    id?: boolean
    connectionId?: boolean
    senderDeviceId?: boolean
    receiverDeviceId?: boolean
    resExpress?: boolean
    connection?: boolean | ConnectionArgs
  }


  export type ResInclude = {
    connection?: boolean | ConnectionArgs
  }

  export type ResGetPayload<S extends boolean | null | undefined | ResArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Res :
    S extends undefined ? never :
    S extends { include: any } & (ResArgs | ResFindManyArgs)
    ? Res  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'connection' ? ConnectionGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ResArgs | ResFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'connection' ? ConnectionGetPayload<S['select'][P]> :  P extends keyof Res ? Res[P] : never
  } 
      : Res


  type ResCountArgs = 
    Omit<ResFindManyArgs, 'select' | 'include'> & {
      select?: ResCountAggregateInputType | true
    }

  export interface ResDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Res that matches the filter.
     * @param {ResFindUniqueArgs} args - Arguments to find a Res
     * @example
     * // Get one Res
     * const res = await prisma.res.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ResFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ResFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Res'> extends True ? Prisma__ResClient<ResGetPayload<T>> : Prisma__ResClient<ResGetPayload<T> | null, null>

    /**
     * Find one Res that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ResFindUniqueOrThrowArgs} args - Arguments to find a Res
     * @example
     * // Get one Res
     * const res = await prisma.res.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ResFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ResFindUniqueOrThrowArgs>
    ): Prisma__ResClient<ResGetPayload<T>>

    /**
     * Find the first Res that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResFindFirstArgs} args - Arguments to find a Res
     * @example
     * // Get one Res
     * const res = await prisma.res.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ResFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ResFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Res'> extends True ? Prisma__ResClient<ResGetPayload<T>> : Prisma__ResClient<ResGetPayload<T> | null, null>

    /**
     * Find the first Res that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResFindFirstOrThrowArgs} args - Arguments to find a Res
     * @example
     * // Get one Res
     * const res = await prisma.res.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ResFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ResFindFirstOrThrowArgs>
    ): Prisma__ResClient<ResGetPayload<T>>

    /**
     * Find zero or more Res that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Res
     * const res = await prisma.res.findMany()
     * 
     * // Get first 10 Res
     * const res = await prisma.res.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resWithIdOnly = await prisma.res.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ResFindManyArgs>(
      args?: SelectSubset<T, ResFindManyArgs>
    ): Prisma.PrismaPromise<Array<ResGetPayload<T>>>

    /**
     * Create a Res.
     * @param {ResCreateArgs} args - Arguments to create a Res.
     * @example
     * // Create one Res
     * const Res = await prisma.res.create({
     *   data: {
     *     // ... data to create a Res
     *   }
     * })
     * 
    **/
    create<T extends ResCreateArgs>(
      args: SelectSubset<T, ResCreateArgs>
    ): Prisma__ResClient<ResGetPayload<T>>

    /**
     * Create many Res.
     *     @param {ResCreateManyArgs} args - Arguments to create many Res.
     *     @example
     *     // Create many Res
     *     const res = await prisma.res.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ResCreateManyArgs>(
      args?: SelectSubset<T, ResCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Res.
     * @param {ResDeleteArgs} args - Arguments to delete one Res.
     * @example
     * // Delete one Res
     * const Res = await prisma.res.delete({
     *   where: {
     *     // ... filter to delete one Res
     *   }
     * })
     * 
    **/
    delete<T extends ResDeleteArgs>(
      args: SelectSubset<T, ResDeleteArgs>
    ): Prisma__ResClient<ResGetPayload<T>>

    /**
     * Update one Res.
     * @param {ResUpdateArgs} args - Arguments to update one Res.
     * @example
     * // Update one Res
     * const res = await prisma.res.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ResUpdateArgs>(
      args: SelectSubset<T, ResUpdateArgs>
    ): Prisma__ResClient<ResGetPayload<T>>

    /**
     * Delete zero or more Res.
     * @param {ResDeleteManyArgs} args - Arguments to filter Res to delete.
     * @example
     * // Delete a few Res
     * const { count } = await prisma.res.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ResDeleteManyArgs>(
      args?: SelectSubset<T, ResDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Res.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Res
     * const res = await prisma.res.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ResUpdateManyArgs>(
      args: SelectSubset<T, ResUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Res.
     * @param {ResUpsertArgs} args - Arguments to update or create a Res.
     * @example
     * // Update or create a Res
     * const res = await prisma.res.upsert({
     *   create: {
     *     // ... data to create a Res
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Res we want to update
     *   }
     * })
    **/
    upsert<T extends ResUpsertArgs>(
      args: SelectSubset<T, ResUpsertArgs>
    ): Prisma__ResClient<ResGetPayload<T>>

    /**
     * Count the number of Res.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResCountArgs} args - Arguments to filter Res to count.
     * @example
     * // Count the number of Res
     * const count = await prisma.res.count({
     *   where: {
     *     // ... the filter for the Res we want to count
     *   }
     * })
    **/
    count<T extends ResCountArgs>(
      args?: Subset<T, ResCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Res.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResAggregateArgs>(args: Subset<T, ResAggregateArgs>): Prisma.PrismaPromise<GetResAggregateType<T>>

    /**
     * Group by Res.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResGroupByArgs['orderBy'] }
        : { orderBy?: ResGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Res.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ResClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    connection<T extends ConnectionArgs= {}>(args?: Subset<T, ConnectionArgs>): Prisma__ConnectionClient<ConnectionGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Res base type for findUnique actions
   */
  export type ResFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Res
     */
    select?: ResSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResInclude | null
    /**
     * Filter, which Res to fetch.
     */
    where: ResWhereUniqueInput
  }

  /**
   * Res findUnique
   */
  export interface ResFindUniqueArgs extends ResFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Res findUniqueOrThrow
   */
  export type ResFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Res
     */
    select?: ResSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResInclude | null
    /**
     * Filter, which Res to fetch.
     */
    where: ResWhereUniqueInput
  }


  /**
   * Res base type for findFirst actions
   */
  export type ResFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Res
     */
    select?: ResSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResInclude | null
    /**
     * Filter, which Res to fetch.
     */
    where?: ResWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Res to fetch.
     */
    orderBy?: Enumerable<ResOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Res.
     */
    cursor?: ResWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Res from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Res.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Res.
     */
    distinct?: Enumerable<ResScalarFieldEnum>
  }

  /**
   * Res findFirst
   */
  export interface ResFindFirstArgs extends ResFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Res findFirstOrThrow
   */
  export type ResFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Res
     */
    select?: ResSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResInclude | null
    /**
     * Filter, which Res to fetch.
     */
    where?: ResWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Res to fetch.
     */
    orderBy?: Enumerable<ResOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Res.
     */
    cursor?: ResWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Res from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Res.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Res.
     */
    distinct?: Enumerable<ResScalarFieldEnum>
  }


  /**
   * Res findMany
   */
  export type ResFindManyArgs = {
    /**
     * Select specific fields to fetch from the Res
     */
    select?: ResSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResInclude | null
    /**
     * Filter, which Res to fetch.
     */
    where?: ResWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Res to fetch.
     */
    orderBy?: Enumerable<ResOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Res.
     */
    cursor?: ResWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Res from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Res.
     */
    skip?: number
    distinct?: Enumerable<ResScalarFieldEnum>
  }


  /**
   * Res create
   */
  export type ResCreateArgs = {
    /**
     * Select specific fields to fetch from the Res
     */
    select?: ResSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResInclude | null
    /**
     * The data needed to create a Res.
     */
    data: XOR<ResCreateInput, ResUncheckedCreateInput>
  }


  /**
   * Res createMany
   */
  export type ResCreateManyArgs = {
    /**
     * The data used to create many Res.
     */
    data: Enumerable<ResCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Res update
   */
  export type ResUpdateArgs = {
    /**
     * Select specific fields to fetch from the Res
     */
    select?: ResSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResInclude | null
    /**
     * The data needed to update a Res.
     */
    data: XOR<ResUpdateInput, ResUncheckedUpdateInput>
    /**
     * Choose, which Res to update.
     */
    where: ResWhereUniqueInput
  }


  /**
   * Res updateMany
   */
  export type ResUpdateManyArgs = {
    /**
     * The data used to update Res.
     */
    data: XOR<ResUpdateManyMutationInput, ResUncheckedUpdateManyInput>
    /**
     * Filter which Res to update
     */
    where?: ResWhereInput
  }


  /**
   * Res upsert
   */
  export type ResUpsertArgs = {
    /**
     * Select specific fields to fetch from the Res
     */
    select?: ResSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResInclude | null
    /**
     * The filter to search for the Res to update in case it exists.
     */
    where: ResWhereUniqueInput
    /**
     * In case the Res found by the `where` argument doesn't exist, create a new Res with this data.
     */
    create: XOR<ResCreateInput, ResUncheckedCreateInput>
    /**
     * In case the Res was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResUpdateInput, ResUncheckedUpdateInput>
  }


  /**
   * Res delete
   */
  export type ResDeleteArgs = {
    /**
     * Select specific fields to fetch from the Res
     */
    select?: ResSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResInclude | null
    /**
     * Filter which Res to delete.
     */
    where: ResWhereUniqueInput
  }


  /**
   * Res deleteMany
   */
  export type ResDeleteManyArgs = {
    /**
     * Filter which Res to delete
     */
    where?: ResWhereInput
  }


  /**
   * Res without action
   */
  export type ResArgs = {
    /**
     * Select specific fields to fetch from the Res
     */
    select?: ResSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ConnectionScalarFieldEnum: {
    id: 'id',
    connectionStatus: 'connectionStatus'
  };

  export type ConnectionScalarFieldEnum = (typeof ConnectionScalarFieldEnum)[keyof typeof ConnectionScalarFieldEnum]


  export const DeviceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId',
    status: 'status'
  };

  export type DeviceScalarFieldEnum = (typeof DeviceScalarFieldEnum)[keyof typeof DeviceScalarFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const ReqScalarFieldEnum: {
    id: 'id',
    connectionId: 'connectionId',
    senderDeviceId: 'senderDeviceId',
    receiverDeviceId: 'receiverDeviceId',
    reqExpress: 'reqExpress'
  };

  export type ReqScalarFieldEnum = (typeof ReqScalarFieldEnum)[keyof typeof ReqScalarFieldEnum]


  export const ResScalarFieldEnum: {
    id: 'id',
    connectionId: 'connectionId',
    senderDeviceId: 'senderDeviceId',
    receiverDeviceId: 'receiverDeviceId',
    resExpress: 'resExpress'
  };

  export type ResScalarFieldEnum = (typeof ResScalarFieldEnum)[keyof typeof ResScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const ThreatScalarFieldEnum: {
    id: 'id',
    deviceId: 'deviceId',
    type: 'type',
    info: 'info'
  };

  export type ThreatScalarFieldEnum = (typeof ThreatScalarFieldEnum)[keyof typeof ThreatScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    info: 'info',
    email: 'email',
    password: 'password',
    userRole: 'userRole',
    avatar: 'avatar',
    googleUserId: 'googleUserId',
    userStatus: 'userStatus',
    keywords: 'keywords'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    username?: StringFilter | string
    info?: JsonNullableFilter
    email?: StringFilter | string
    password?: StringFilter | string
    userRole?: EnumUserRoleFilter | UserRole
    avatar?: StringNullableFilter | string | null
    googleUserId?: StringNullableFilter | string | null
    userStatus?: EnumUserStatusFilter | UserStatus
    keywords?: StringNullableListFilter
    devices?: DeviceListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    info?: SortOrder
    email?: SortOrder
    password?: SortOrder
    userRole?: SortOrder
    avatar?: SortOrder
    googleUserId?: SortOrder
    userStatus?: SortOrder
    keywords?: SortOrder
    devices?: DeviceOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    username?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    info?: SortOrder
    email?: SortOrder
    password?: SortOrder
    userRole?: SortOrder
    avatar?: SortOrder
    googleUserId?: SortOrder
    userStatus?: SortOrder
    keywords?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    info?: JsonNullableWithAggregatesFilter
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    userRole?: EnumUserRoleWithAggregatesFilter | UserRole
    avatar?: StringNullableWithAggregatesFilter | string | null
    googleUserId?: StringNullableWithAggregatesFilter | string | null
    userStatus?: EnumUserStatusWithAggregatesFilter | UserStatus
    keywords?: StringNullableListFilter
  }

  export type DeviceWhereInput = {
    AND?: Enumerable<DeviceWhereInput>
    OR?: Enumerable<DeviceWhereInput>
    NOT?: Enumerable<DeviceWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    userId?: StringFilter | string
    status?: EnumDeviceStatusFilter | DeviceStatus
    user?: XOR<UserRelationFilter, UserWhereInput>
    quarantine?: ThreatListRelationFilter
    connection?: ConnectionListRelationFilter
  }

  export type DeviceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    user?: UserOrderByWithRelationInput
    quarantine?: ThreatOrderByRelationAggregateInput
    connection?: ConnectionOrderByRelationAggregateInput
  }

  export type DeviceWhereUniqueInput = {
    id?: string
  }

  export type DeviceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    _count?: DeviceCountOrderByAggregateInput
    _max?: DeviceMaxOrderByAggregateInput
    _min?: DeviceMinOrderByAggregateInput
  }

  export type DeviceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DeviceScalarWhereWithAggregatesInput>
    OR?: Enumerable<DeviceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DeviceScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    status?: EnumDeviceStatusWithAggregatesFilter | DeviceStatus
  }

  export type ThreatWhereInput = {
    AND?: Enumerable<ThreatWhereInput>
    OR?: Enumerable<ThreatWhereInput>
    NOT?: Enumerable<ThreatWhereInput>
    id?: StringFilter | string
    deviceId?: StringFilter | string
    type?: EnumThreatTypeFilter | ThreatType
    info?: JsonFilter
    device?: XOR<DeviceRelationFilter, DeviceWhereInput>
  }

  export type ThreatOrderByWithRelationInput = {
    id?: SortOrder
    deviceId?: SortOrder
    type?: SortOrder
    info?: SortOrder
    device?: DeviceOrderByWithRelationInput
  }

  export type ThreatWhereUniqueInput = {
    id?: string
  }

  export type ThreatOrderByWithAggregationInput = {
    id?: SortOrder
    deviceId?: SortOrder
    type?: SortOrder
    info?: SortOrder
    _count?: ThreatCountOrderByAggregateInput
    _max?: ThreatMaxOrderByAggregateInput
    _min?: ThreatMinOrderByAggregateInput
  }

  export type ThreatScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ThreatScalarWhereWithAggregatesInput>
    OR?: Enumerable<ThreatScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ThreatScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    deviceId?: StringWithAggregatesFilter | string
    type?: EnumThreatTypeWithAggregatesFilter | ThreatType
    info?: JsonWithAggregatesFilter
  }

  export type ConnectionWhereInput = {
    AND?: Enumerable<ConnectionWhereInput>
    OR?: Enumerable<ConnectionWhereInput>
    NOT?: Enumerable<ConnectionWhereInput>
    id?: StringFilter | string
    connectionStatus?: EnumConnectionStatusFilter | ConnectionStatus
    req?: ReqListRelationFilter
    res?: ResListRelationFilter
    device?: DeviceListRelationFilter
  }

  export type ConnectionOrderByWithRelationInput = {
    id?: SortOrder
    connectionStatus?: SortOrder
    req?: ReqOrderByRelationAggregateInput
    res?: ResOrderByRelationAggregateInput
    device?: DeviceOrderByRelationAggregateInput
  }

  export type ConnectionWhereUniqueInput = {
    id?: string
  }

  export type ConnectionOrderByWithAggregationInput = {
    id?: SortOrder
    connectionStatus?: SortOrder
    _count?: ConnectionCountOrderByAggregateInput
    _max?: ConnectionMaxOrderByAggregateInput
    _min?: ConnectionMinOrderByAggregateInput
  }

  export type ConnectionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ConnectionScalarWhereWithAggregatesInput>
    OR?: Enumerable<ConnectionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ConnectionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    connectionStatus?: EnumConnectionStatusWithAggregatesFilter | ConnectionStatus
  }

  export type ReqWhereInput = {
    AND?: Enumerable<ReqWhereInput>
    OR?: Enumerable<ReqWhereInput>
    NOT?: Enumerable<ReqWhereInput>
    id?: StringFilter | string
    connectionId?: StringFilter | string
    senderDeviceId?: StringFilter | string
    receiverDeviceId?: StringFilter | string
    reqExpress?: JsonFilter
    connection?: XOR<ConnectionRelationFilter, ConnectionWhereInput>
  }

  export type ReqOrderByWithRelationInput = {
    id?: SortOrder
    connectionId?: SortOrder
    senderDeviceId?: SortOrder
    receiverDeviceId?: SortOrder
    reqExpress?: SortOrder
    connection?: ConnectionOrderByWithRelationInput
  }

  export type ReqWhereUniqueInput = {
    id?: string
  }

  export type ReqOrderByWithAggregationInput = {
    id?: SortOrder
    connectionId?: SortOrder
    senderDeviceId?: SortOrder
    receiverDeviceId?: SortOrder
    reqExpress?: SortOrder
    _count?: ReqCountOrderByAggregateInput
    _max?: ReqMaxOrderByAggregateInput
    _min?: ReqMinOrderByAggregateInput
  }

  export type ReqScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReqScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReqScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReqScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    connectionId?: StringWithAggregatesFilter | string
    senderDeviceId?: StringWithAggregatesFilter | string
    receiverDeviceId?: StringWithAggregatesFilter | string
    reqExpress?: JsonWithAggregatesFilter
  }

  export type ResWhereInput = {
    AND?: Enumerable<ResWhereInput>
    OR?: Enumerable<ResWhereInput>
    NOT?: Enumerable<ResWhereInput>
    id?: StringFilter | string
    connectionId?: StringFilter | string
    senderDeviceId?: StringFilter | string
    receiverDeviceId?: StringFilter | string
    resExpress?: JsonFilter
    connection?: XOR<ConnectionRelationFilter, ConnectionWhereInput>
  }

  export type ResOrderByWithRelationInput = {
    id?: SortOrder
    connectionId?: SortOrder
    senderDeviceId?: SortOrder
    receiverDeviceId?: SortOrder
    resExpress?: SortOrder
    connection?: ConnectionOrderByWithRelationInput
  }

  export type ResWhereUniqueInput = {
    id?: string
  }

  export type ResOrderByWithAggregationInput = {
    id?: SortOrder
    connectionId?: SortOrder
    senderDeviceId?: SortOrder
    receiverDeviceId?: SortOrder
    resExpress?: SortOrder
    _count?: ResCountOrderByAggregateInput
    _max?: ResMaxOrderByAggregateInput
    _min?: ResMinOrderByAggregateInput
  }

  export type ResScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ResScalarWhereWithAggregatesInput>
    OR?: Enumerable<ResScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ResScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    connectionId?: StringWithAggregatesFilter | string
    senderDeviceId?: StringWithAggregatesFilter | string
    receiverDeviceId?: StringWithAggregatesFilter | string
    resExpress?: JsonWithAggregatesFilter
  }

  export type UserCreateInput = {
    id?: string
    username: string
    info?: NullableJsonNullValueInput | InputJsonValue
    email: string
    password: string
    userRole: UserRole
    avatar?: string | null
    googleUserId?: string | null
    userStatus?: UserStatus
    keywords?: UserCreatekeywordsInput | Enumerable<string>
    devices?: DeviceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    info?: NullableJsonNullValueInput | InputJsonValue
    email: string
    password: string
    userRole: UserRole
    avatar?: string | null
    googleUserId?: string | null
    userStatus?: UserStatus
    keywords?: UserCreatekeywordsInput | Enumerable<string>
    devices?: DeviceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    info?: NullableJsonNullValueInput | InputJsonValue
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userRole?: EnumUserRoleFieldUpdateOperationsInput | UserRole
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleUserId?: NullableStringFieldUpdateOperationsInput | string | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    keywords?: UserUpdatekeywordsInput | Enumerable<string>
    devices?: DeviceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    info?: NullableJsonNullValueInput | InputJsonValue
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userRole?: EnumUserRoleFieldUpdateOperationsInput | UserRole
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleUserId?: NullableStringFieldUpdateOperationsInput | string | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    keywords?: UserUpdatekeywordsInput | Enumerable<string>
    devices?: DeviceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    info?: NullableJsonNullValueInput | InputJsonValue
    email: string
    password: string
    userRole: UserRole
    avatar?: string | null
    googleUserId?: string | null
    userStatus?: UserStatus
    keywords?: UserCreatekeywordsInput | Enumerable<string>
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    info?: NullableJsonNullValueInput | InputJsonValue
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userRole?: EnumUserRoleFieldUpdateOperationsInput | UserRole
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleUserId?: NullableStringFieldUpdateOperationsInput | string | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    keywords?: UserUpdatekeywordsInput | Enumerable<string>
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    info?: NullableJsonNullValueInput | InputJsonValue
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userRole?: EnumUserRoleFieldUpdateOperationsInput | UserRole
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleUserId?: NullableStringFieldUpdateOperationsInput | string | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    keywords?: UserUpdatekeywordsInput | Enumerable<string>
  }

  export type DeviceCreateInput = {
    id?: string
    name: string
    status: DeviceStatus
    user: UserCreateNestedOneWithoutDevicesInput
    quarantine?: ThreatCreateNestedManyWithoutDeviceInput
    connection?: ConnectionCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUncheckedCreateInput = {
    id?: string
    name: string
    userId: string
    status: DeviceStatus
    quarantine?: ThreatUncheckedCreateNestedManyWithoutDeviceInput
    connection?: ConnectionUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumDeviceStatusFieldUpdateOperationsInput | DeviceStatus
    user?: UserUpdateOneRequiredWithoutDevicesNestedInput
    quarantine?: ThreatUpdateManyWithoutDeviceNestedInput
    connection?: ConnectionUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: EnumDeviceStatusFieldUpdateOperationsInput | DeviceStatus
    quarantine?: ThreatUncheckedUpdateManyWithoutDeviceNestedInput
    connection?: ConnectionUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceCreateManyInput = {
    id?: string
    name: string
    userId: string
    status: DeviceStatus
  }

  export type DeviceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumDeviceStatusFieldUpdateOperationsInput | DeviceStatus
  }

  export type DeviceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: EnumDeviceStatusFieldUpdateOperationsInput | DeviceStatus
  }

  export type ThreatCreateInput = {
    id?: string
    type: ThreatType
    info: JsonNullValueInput | InputJsonValue
    device: DeviceCreateNestedOneWithoutQuarantineInput
  }

  export type ThreatUncheckedCreateInput = {
    id?: string
    deviceId: string
    type: ThreatType
    info: JsonNullValueInput | InputJsonValue
  }

  export type ThreatUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumThreatTypeFieldUpdateOperationsInput | ThreatType
    info?: JsonNullValueInput | InputJsonValue
    device?: DeviceUpdateOneRequiredWithoutQuarantineNestedInput
  }

  export type ThreatUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    type?: EnumThreatTypeFieldUpdateOperationsInput | ThreatType
    info?: JsonNullValueInput | InputJsonValue
  }

  export type ThreatCreateManyInput = {
    id?: string
    deviceId: string
    type: ThreatType
    info: JsonNullValueInput | InputJsonValue
  }

  export type ThreatUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumThreatTypeFieldUpdateOperationsInput | ThreatType
    info?: JsonNullValueInput | InputJsonValue
  }

  export type ThreatUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    type?: EnumThreatTypeFieldUpdateOperationsInput | ThreatType
    info?: JsonNullValueInput | InputJsonValue
  }

  export type ConnectionCreateInput = {
    id?: string
    connectionStatus: ConnectionStatus
    req?: ReqCreateNestedManyWithoutConnectionInput
    res?: ResCreateNestedManyWithoutConnectionInput
    device?: DeviceCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionUncheckedCreateInput = {
    id?: string
    connectionStatus: ConnectionStatus
    req?: ReqUncheckedCreateNestedManyWithoutConnectionInput
    res?: ResUncheckedCreateNestedManyWithoutConnectionInput
    device?: DeviceUncheckedCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionStatus?: EnumConnectionStatusFieldUpdateOperationsInput | ConnectionStatus
    req?: ReqUpdateManyWithoutConnectionNestedInput
    res?: ResUpdateManyWithoutConnectionNestedInput
    device?: DeviceUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionStatus?: EnumConnectionStatusFieldUpdateOperationsInput | ConnectionStatus
    req?: ReqUncheckedUpdateManyWithoutConnectionNestedInput
    res?: ResUncheckedUpdateManyWithoutConnectionNestedInput
    device?: DeviceUncheckedUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionCreateManyInput = {
    id?: string
    connectionStatus: ConnectionStatus
  }

  export type ConnectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionStatus?: EnumConnectionStatusFieldUpdateOperationsInput | ConnectionStatus
  }

  export type ConnectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionStatus?: EnumConnectionStatusFieldUpdateOperationsInput | ConnectionStatus
  }

  export type ReqCreateInput = {
    id?: string
    senderDeviceId: string
    receiverDeviceId: string
    reqExpress: JsonNullValueInput | InputJsonValue
    connection: ConnectionCreateNestedOneWithoutReqInput
  }

  export type ReqUncheckedCreateInput = {
    id?: string
    connectionId: string
    senderDeviceId: string
    receiverDeviceId: string
    reqExpress: JsonNullValueInput | InputJsonValue
  }

  export type ReqUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderDeviceId?: StringFieldUpdateOperationsInput | string
    receiverDeviceId?: StringFieldUpdateOperationsInput | string
    reqExpress?: JsonNullValueInput | InputJsonValue
    connection?: ConnectionUpdateOneRequiredWithoutReqNestedInput
  }

  export type ReqUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
    senderDeviceId?: StringFieldUpdateOperationsInput | string
    receiverDeviceId?: StringFieldUpdateOperationsInput | string
    reqExpress?: JsonNullValueInput | InputJsonValue
  }

  export type ReqCreateManyInput = {
    id?: string
    connectionId: string
    senderDeviceId: string
    receiverDeviceId: string
    reqExpress: JsonNullValueInput | InputJsonValue
  }

  export type ReqUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderDeviceId?: StringFieldUpdateOperationsInput | string
    receiverDeviceId?: StringFieldUpdateOperationsInput | string
    reqExpress?: JsonNullValueInput | InputJsonValue
  }

  export type ReqUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
    senderDeviceId?: StringFieldUpdateOperationsInput | string
    receiverDeviceId?: StringFieldUpdateOperationsInput | string
    reqExpress?: JsonNullValueInput | InputJsonValue
  }

  export type ResCreateInput = {
    id?: string
    senderDeviceId: string
    receiverDeviceId: string
    resExpress: JsonNullValueInput | InputJsonValue
    connection: ConnectionCreateNestedOneWithoutResInput
  }

  export type ResUncheckedCreateInput = {
    id?: string
    connectionId: string
    senderDeviceId: string
    receiverDeviceId: string
    resExpress: JsonNullValueInput | InputJsonValue
  }

  export type ResUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderDeviceId?: StringFieldUpdateOperationsInput | string
    receiverDeviceId?: StringFieldUpdateOperationsInput | string
    resExpress?: JsonNullValueInput | InputJsonValue
    connection?: ConnectionUpdateOneRequiredWithoutResNestedInput
  }

  export type ResUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
    senderDeviceId?: StringFieldUpdateOperationsInput | string
    receiverDeviceId?: StringFieldUpdateOperationsInput | string
    resExpress?: JsonNullValueInput | InputJsonValue
  }

  export type ResCreateManyInput = {
    id?: string
    connectionId: string
    senderDeviceId: string
    receiverDeviceId: string
    resExpress: JsonNullValueInput | InputJsonValue
  }

  export type ResUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderDeviceId?: StringFieldUpdateOperationsInput | string
    receiverDeviceId?: StringFieldUpdateOperationsInput | string
    resExpress?: JsonNullValueInput | InputJsonValue
  }

  export type ResUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
    senderDeviceId?: StringFieldUpdateOperationsInput | string
    receiverDeviceId?: StringFieldUpdateOperationsInput | string
    resExpress?: JsonNullValueInput | InputJsonValue
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type EnumUserRoleFilter = {
    equals?: UserRole
    in?: Enumerable<UserRole>
    notIn?: Enumerable<UserRole>
    not?: NestedEnumUserRoleFilter | UserRole
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type EnumUserStatusFilter = {
    equals?: UserStatus
    in?: Enumerable<UserStatus>
    notIn?: Enumerable<UserStatus>
    not?: NestedEnumUserStatusFilter | UserStatus
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type DeviceListRelationFilter = {
    every?: DeviceWhereInput
    some?: DeviceWhereInput
    none?: DeviceWhereInput
  }

  export type DeviceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    info?: SortOrder
    email?: SortOrder
    password?: SortOrder
    userRole?: SortOrder
    avatar?: SortOrder
    googleUserId?: SortOrder
    userStatus?: SortOrder
    keywords?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    userRole?: SortOrder
    avatar?: SortOrder
    googleUserId?: SortOrder
    userStatus?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    userRole?: SortOrder
    avatar?: SortOrder
    googleUserId?: SortOrder
    userStatus?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type EnumUserRoleWithAggregatesFilter = {
    equals?: UserRole
    in?: Enumerable<UserRole>
    notIn?: Enumerable<UserRole>
    not?: NestedEnumUserRoleWithAggregatesFilter | UserRole
    _count?: NestedIntFilter
    _min?: NestedEnumUserRoleFilter
    _max?: NestedEnumUserRoleFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type EnumUserStatusWithAggregatesFilter = {
    equals?: UserStatus
    in?: Enumerable<UserStatus>
    notIn?: Enumerable<UserStatus>
    not?: NestedEnumUserStatusWithAggregatesFilter | UserStatus
    _count?: NestedIntFilter
    _min?: NestedEnumUserStatusFilter
    _max?: NestedEnumUserStatusFilter
  }

  export type EnumDeviceStatusFilter = {
    equals?: DeviceStatus
    in?: Enumerable<DeviceStatus>
    notIn?: Enumerable<DeviceStatus>
    not?: NestedEnumDeviceStatusFilter | DeviceStatus
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ThreatListRelationFilter = {
    every?: ThreatWhereInput
    some?: ThreatWhereInput
    none?: ThreatWhereInput
  }

  export type ConnectionListRelationFilter = {
    every?: ConnectionWhereInput
    some?: ConnectionWhereInput
    none?: ConnectionWhereInput
  }

  export type ThreatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConnectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DeviceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    status?: SortOrder
  }

  export type DeviceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    status?: SortOrder
  }

  export type DeviceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    status?: SortOrder
  }

  export type EnumDeviceStatusWithAggregatesFilter = {
    equals?: DeviceStatus
    in?: Enumerable<DeviceStatus>
    notIn?: Enumerable<DeviceStatus>
    not?: NestedEnumDeviceStatusWithAggregatesFilter | DeviceStatus
    _count?: NestedIntFilter
    _min?: NestedEnumDeviceStatusFilter
    _max?: NestedEnumDeviceStatusFilter
  }

  export type EnumThreatTypeFilter = {
    equals?: ThreatType
    in?: Enumerable<ThreatType>
    notIn?: Enumerable<ThreatType>
    not?: NestedEnumThreatTypeFilter | ThreatType
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type DeviceRelationFilter = {
    is?: DeviceWhereInput
    isNot?: DeviceWhereInput
  }

  export type ThreatCountOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    type?: SortOrder
    info?: SortOrder
  }

  export type ThreatMaxOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    type?: SortOrder
  }

  export type ThreatMinOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    type?: SortOrder
  }

  export type EnumThreatTypeWithAggregatesFilter = {
    equals?: ThreatType
    in?: Enumerable<ThreatType>
    notIn?: Enumerable<ThreatType>
    not?: NestedEnumThreatTypeWithAggregatesFilter | ThreatType
    _count?: NestedIntFilter
    _min?: NestedEnumThreatTypeFilter
    _max?: NestedEnumThreatTypeFilter
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type EnumConnectionStatusFilter = {
    equals?: ConnectionStatus
    in?: Enumerable<ConnectionStatus>
    notIn?: Enumerable<ConnectionStatus>
    not?: NestedEnumConnectionStatusFilter | ConnectionStatus
  }

  export type ReqListRelationFilter = {
    every?: ReqWhereInput
    some?: ReqWhereInput
    none?: ReqWhereInput
  }

  export type ResListRelationFilter = {
    every?: ResWhereInput
    some?: ResWhereInput
    none?: ResWhereInput
  }

  export type ReqOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConnectionCountOrderByAggregateInput = {
    id?: SortOrder
    connectionStatus?: SortOrder
  }

  export type ConnectionMaxOrderByAggregateInput = {
    id?: SortOrder
    connectionStatus?: SortOrder
  }

  export type ConnectionMinOrderByAggregateInput = {
    id?: SortOrder
    connectionStatus?: SortOrder
  }

  export type EnumConnectionStatusWithAggregatesFilter = {
    equals?: ConnectionStatus
    in?: Enumerable<ConnectionStatus>
    notIn?: Enumerable<ConnectionStatus>
    not?: NestedEnumConnectionStatusWithAggregatesFilter | ConnectionStatus
    _count?: NestedIntFilter
    _min?: NestedEnumConnectionStatusFilter
    _max?: NestedEnumConnectionStatusFilter
  }

  export type ConnectionRelationFilter = {
    is?: ConnectionWhereInput
    isNot?: ConnectionWhereInput
  }

  export type ReqCountOrderByAggregateInput = {
    id?: SortOrder
    connectionId?: SortOrder
    senderDeviceId?: SortOrder
    receiverDeviceId?: SortOrder
    reqExpress?: SortOrder
  }

  export type ReqMaxOrderByAggregateInput = {
    id?: SortOrder
    connectionId?: SortOrder
    senderDeviceId?: SortOrder
    receiverDeviceId?: SortOrder
  }

  export type ReqMinOrderByAggregateInput = {
    id?: SortOrder
    connectionId?: SortOrder
    senderDeviceId?: SortOrder
    receiverDeviceId?: SortOrder
  }

  export type ResCountOrderByAggregateInput = {
    id?: SortOrder
    connectionId?: SortOrder
    senderDeviceId?: SortOrder
    receiverDeviceId?: SortOrder
    resExpress?: SortOrder
  }

  export type ResMaxOrderByAggregateInput = {
    id?: SortOrder
    connectionId?: SortOrder
    senderDeviceId?: SortOrder
    receiverDeviceId?: SortOrder
  }

  export type ResMinOrderByAggregateInput = {
    id?: SortOrder
    connectionId?: SortOrder
    senderDeviceId?: SortOrder
    receiverDeviceId?: SortOrder
  }

  export type UserCreatekeywordsInput = {
    set: Enumerable<string>
  }

  export type DeviceCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutUserInput>, Enumerable<DeviceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutUserInput>
    createMany?: DeviceCreateManyUserInputEnvelope
    connect?: Enumerable<DeviceWhereUniqueInput>
  }

  export type DeviceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutUserInput>, Enumerable<DeviceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutUserInput>
    createMany?: DeviceCreateManyUserInputEnvelope
    connect?: Enumerable<DeviceWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: UserRole
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: UserStatus
  }

  export type UserUpdatekeywordsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type DeviceUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutUserInput>, Enumerable<DeviceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<DeviceUpsertWithWhereUniqueWithoutUserInput>
    createMany?: DeviceCreateManyUserInputEnvelope
    set?: Enumerable<DeviceWhereUniqueInput>
    disconnect?: Enumerable<DeviceWhereUniqueInput>
    delete?: Enumerable<DeviceWhereUniqueInput>
    connect?: Enumerable<DeviceWhereUniqueInput>
    update?: Enumerable<DeviceUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<DeviceUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<DeviceScalarWhereInput>
  }

  export type DeviceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutUserInput>, Enumerable<DeviceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<DeviceUpsertWithWhereUniqueWithoutUserInput>
    createMany?: DeviceCreateManyUserInputEnvelope
    set?: Enumerable<DeviceWhereUniqueInput>
    disconnect?: Enumerable<DeviceWhereUniqueInput>
    delete?: Enumerable<DeviceWhereUniqueInput>
    connect?: Enumerable<DeviceWhereUniqueInput>
    update?: Enumerable<DeviceUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<DeviceUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<DeviceScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutDevicesInput = {
    create?: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDevicesInput
    connect?: UserWhereUniqueInput
  }

  export type ThreatCreateNestedManyWithoutDeviceInput = {
    create?: XOR<Enumerable<ThreatCreateWithoutDeviceInput>, Enumerable<ThreatUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<ThreatCreateOrConnectWithoutDeviceInput>
    createMany?: ThreatCreateManyDeviceInputEnvelope
    connect?: Enumerable<ThreatWhereUniqueInput>
  }

  export type ConnectionCreateNestedManyWithoutDeviceInput = {
    create?: XOR<Enumerable<ConnectionCreateWithoutDeviceInput>, Enumerable<ConnectionUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<ConnectionCreateOrConnectWithoutDeviceInput>
    connect?: Enumerable<ConnectionWhereUniqueInput>
  }

  export type ThreatUncheckedCreateNestedManyWithoutDeviceInput = {
    create?: XOR<Enumerable<ThreatCreateWithoutDeviceInput>, Enumerable<ThreatUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<ThreatCreateOrConnectWithoutDeviceInput>
    createMany?: ThreatCreateManyDeviceInputEnvelope
    connect?: Enumerable<ThreatWhereUniqueInput>
  }

  export type ConnectionUncheckedCreateNestedManyWithoutDeviceInput = {
    create?: XOR<Enumerable<ConnectionCreateWithoutDeviceInput>, Enumerable<ConnectionUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<ConnectionCreateOrConnectWithoutDeviceInput>
    connect?: Enumerable<ConnectionWhereUniqueInput>
  }

  export type EnumDeviceStatusFieldUpdateOperationsInput = {
    set?: DeviceStatus
  }

  export type UserUpdateOneRequiredWithoutDevicesNestedInput = {
    create?: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDevicesInput
    upsert?: UserUpsertWithoutDevicesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutDevicesInput, UserUncheckedUpdateWithoutDevicesInput>
  }

  export type ThreatUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<Enumerable<ThreatCreateWithoutDeviceInput>, Enumerable<ThreatUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<ThreatCreateOrConnectWithoutDeviceInput>
    upsert?: Enumerable<ThreatUpsertWithWhereUniqueWithoutDeviceInput>
    createMany?: ThreatCreateManyDeviceInputEnvelope
    set?: Enumerable<ThreatWhereUniqueInput>
    disconnect?: Enumerable<ThreatWhereUniqueInput>
    delete?: Enumerable<ThreatWhereUniqueInput>
    connect?: Enumerable<ThreatWhereUniqueInput>
    update?: Enumerable<ThreatUpdateWithWhereUniqueWithoutDeviceInput>
    updateMany?: Enumerable<ThreatUpdateManyWithWhereWithoutDeviceInput>
    deleteMany?: Enumerable<ThreatScalarWhereInput>
  }

  export type ConnectionUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<Enumerable<ConnectionCreateWithoutDeviceInput>, Enumerable<ConnectionUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<ConnectionCreateOrConnectWithoutDeviceInput>
    upsert?: Enumerable<ConnectionUpsertWithWhereUniqueWithoutDeviceInput>
    set?: Enumerable<ConnectionWhereUniqueInput>
    disconnect?: Enumerable<ConnectionWhereUniqueInput>
    delete?: Enumerable<ConnectionWhereUniqueInput>
    connect?: Enumerable<ConnectionWhereUniqueInput>
    update?: Enumerable<ConnectionUpdateWithWhereUniqueWithoutDeviceInput>
    updateMany?: Enumerable<ConnectionUpdateManyWithWhereWithoutDeviceInput>
    deleteMany?: Enumerable<ConnectionScalarWhereInput>
  }

  export type ThreatUncheckedUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<Enumerable<ThreatCreateWithoutDeviceInput>, Enumerable<ThreatUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<ThreatCreateOrConnectWithoutDeviceInput>
    upsert?: Enumerable<ThreatUpsertWithWhereUniqueWithoutDeviceInput>
    createMany?: ThreatCreateManyDeviceInputEnvelope
    set?: Enumerable<ThreatWhereUniqueInput>
    disconnect?: Enumerable<ThreatWhereUniqueInput>
    delete?: Enumerable<ThreatWhereUniqueInput>
    connect?: Enumerable<ThreatWhereUniqueInput>
    update?: Enumerable<ThreatUpdateWithWhereUniqueWithoutDeviceInput>
    updateMany?: Enumerable<ThreatUpdateManyWithWhereWithoutDeviceInput>
    deleteMany?: Enumerable<ThreatScalarWhereInput>
  }

  export type ConnectionUncheckedUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<Enumerable<ConnectionCreateWithoutDeviceInput>, Enumerable<ConnectionUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<ConnectionCreateOrConnectWithoutDeviceInput>
    upsert?: Enumerable<ConnectionUpsertWithWhereUniqueWithoutDeviceInput>
    set?: Enumerable<ConnectionWhereUniqueInput>
    disconnect?: Enumerable<ConnectionWhereUniqueInput>
    delete?: Enumerable<ConnectionWhereUniqueInput>
    connect?: Enumerable<ConnectionWhereUniqueInput>
    update?: Enumerable<ConnectionUpdateWithWhereUniqueWithoutDeviceInput>
    updateMany?: Enumerable<ConnectionUpdateManyWithWhereWithoutDeviceInput>
    deleteMany?: Enumerable<ConnectionScalarWhereInput>
  }

  export type DeviceCreateNestedOneWithoutQuarantineInput = {
    create?: XOR<DeviceCreateWithoutQuarantineInput, DeviceUncheckedCreateWithoutQuarantineInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutQuarantineInput
    connect?: DeviceWhereUniqueInput
  }

  export type EnumThreatTypeFieldUpdateOperationsInput = {
    set?: ThreatType
  }

  export type DeviceUpdateOneRequiredWithoutQuarantineNestedInput = {
    create?: XOR<DeviceCreateWithoutQuarantineInput, DeviceUncheckedCreateWithoutQuarantineInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutQuarantineInput
    upsert?: DeviceUpsertWithoutQuarantineInput
    connect?: DeviceWhereUniqueInput
    update?: XOR<DeviceUpdateWithoutQuarantineInput, DeviceUncheckedUpdateWithoutQuarantineInput>
  }

  export type ReqCreateNestedManyWithoutConnectionInput = {
    create?: XOR<Enumerable<ReqCreateWithoutConnectionInput>, Enumerable<ReqUncheckedCreateWithoutConnectionInput>>
    connectOrCreate?: Enumerable<ReqCreateOrConnectWithoutConnectionInput>
    createMany?: ReqCreateManyConnectionInputEnvelope
    connect?: Enumerable<ReqWhereUniqueInput>
  }

  export type ResCreateNestedManyWithoutConnectionInput = {
    create?: XOR<Enumerable<ResCreateWithoutConnectionInput>, Enumerable<ResUncheckedCreateWithoutConnectionInput>>
    connectOrCreate?: Enumerable<ResCreateOrConnectWithoutConnectionInput>
    createMany?: ResCreateManyConnectionInputEnvelope
    connect?: Enumerable<ResWhereUniqueInput>
  }

  export type DeviceCreateNestedManyWithoutConnectionInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutConnectionInput>, Enumerable<DeviceUncheckedCreateWithoutConnectionInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutConnectionInput>
    connect?: Enumerable<DeviceWhereUniqueInput>
  }

  export type ReqUncheckedCreateNestedManyWithoutConnectionInput = {
    create?: XOR<Enumerable<ReqCreateWithoutConnectionInput>, Enumerable<ReqUncheckedCreateWithoutConnectionInput>>
    connectOrCreate?: Enumerable<ReqCreateOrConnectWithoutConnectionInput>
    createMany?: ReqCreateManyConnectionInputEnvelope
    connect?: Enumerable<ReqWhereUniqueInput>
  }

  export type ResUncheckedCreateNestedManyWithoutConnectionInput = {
    create?: XOR<Enumerable<ResCreateWithoutConnectionInput>, Enumerable<ResUncheckedCreateWithoutConnectionInput>>
    connectOrCreate?: Enumerable<ResCreateOrConnectWithoutConnectionInput>
    createMany?: ResCreateManyConnectionInputEnvelope
    connect?: Enumerable<ResWhereUniqueInput>
  }

  export type DeviceUncheckedCreateNestedManyWithoutConnectionInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutConnectionInput>, Enumerable<DeviceUncheckedCreateWithoutConnectionInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutConnectionInput>
    connect?: Enumerable<DeviceWhereUniqueInput>
  }

  export type EnumConnectionStatusFieldUpdateOperationsInput = {
    set?: ConnectionStatus
  }

  export type ReqUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<Enumerable<ReqCreateWithoutConnectionInput>, Enumerable<ReqUncheckedCreateWithoutConnectionInput>>
    connectOrCreate?: Enumerable<ReqCreateOrConnectWithoutConnectionInput>
    upsert?: Enumerable<ReqUpsertWithWhereUniqueWithoutConnectionInput>
    createMany?: ReqCreateManyConnectionInputEnvelope
    set?: Enumerable<ReqWhereUniqueInput>
    disconnect?: Enumerable<ReqWhereUniqueInput>
    delete?: Enumerable<ReqWhereUniqueInput>
    connect?: Enumerable<ReqWhereUniqueInput>
    update?: Enumerable<ReqUpdateWithWhereUniqueWithoutConnectionInput>
    updateMany?: Enumerable<ReqUpdateManyWithWhereWithoutConnectionInput>
    deleteMany?: Enumerable<ReqScalarWhereInput>
  }

  export type ResUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<Enumerable<ResCreateWithoutConnectionInput>, Enumerable<ResUncheckedCreateWithoutConnectionInput>>
    connectOrCreate?: Enumerable<ResCreateOrConnectWithoutConnectionInput>
    upsert?: Enumerable<ResUpsertWithWhereUniqueWithoutConnectionInput>
    createMany?: ResCreateManyConnectionInputEnvelope
    set?: Enumerable<ResWhereUniqueInput>
    disconnect?: Enumerable<ResWhereUniqueInput>
    delete?: Enumerable<ResWhereUniqueInput>
    connect?: Enumerable<ResWhereUniqueInput>
    update?: Enumerable<ResUpdateWithWhereUniqueWithoutConnectionInput>
    updateMany?: Enumerable<ResUpdateManyWithWhereWithoutConnectionInput>
    deleteMany?: Enumerable<ResScalarWhereInput>
  }

  export type DeviceUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutConnectionInput>, Enumerable<DeviceUncheckedCreateWithoutConnectionInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutConnectionInput>
    upsert?: Enumerable<DeviceUpsertWithWhereUniqueWithoutConnectionInput>
    set?: Enumerable<DeviceWhereUniqueInput>
    disconnect?: Enumerable<DeviceWhereUniqueInput>
    delete?: Enumerable<DeviceWhereUniqueInput>
    connect?: Enumerable<DeviceWhereUniqueInput>
    update?: Enumerable<DeviceUpdateWithWhereUniqueWithoutConnectionInput>
    updateMany?: Enumerable<DeviceUpdateManyWithWhereWithoutConnectionInput>
    deleteMany?: Enumerable<DeviceScalarWhereInput>
  }

  export type ReqUncheckedUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<Enumerable<ReqCreateWithoutConnectionInput>, Enumerable<ReqUncheckedCreateWithoutConnectionInput>>
    connectOrCreate?: Enumerable<ReqCreateOrConnectWithoutConnectionInput>
    upsert?: Enumerable<ReqUpsertWithWhereUniqueWithoutConnectionInput>
    createMany?: ReqCreateManyConnectionInputEnvelope
    set?: Enumerable<ReqWhereUniqueInput>
    disconnect?: Enumerable<ReqWhereUniqueInput>
    delete?: Enumerable<ReqWhereUniqueInput>
    connect?: Enumerable<ReqWhereUniqueInput>
    update?: Enumerable<ReqUpdateWithWhereUniqueWithoutConnectionInput>
    updateMany?: Enumerable<ReqUpdateManyWithWhereWithoutConnectionInput>
    deleteMany?: Enumerable<ReqScalarWhereInput>
  }

  export type ResUncheckedUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<Enumerable<ResCreateWithoutConnectionInput>, Enumerable<ResUncheckedCreateWithoutConnectionInput>>
    connectOrCreate?: Enumerable<ResCreateOrConnectWithoutConnectionInput>
    upsert?: Enumerable<ResUpsertWithWhereUniqueWithoutConnectionInput>
    createMany?: ResCreateManyConnectionInputEnvelope
    set?: Enumerable<ResWhereUniqueInput>
    disconnect?: Enumerable<ResWhereUniqueInput>
    delete?: Enumerable<ResWhereUniqueInput>
    connect?: Enumerable<ResWhereUniqueInput>
    update?: Enumerable<ResUpdateWithWhereUniqueWithoutConnectionInput>
    updateMany?: Enumerable<ResUpdateManyWithWhereWithoutConnectionInput>
    deleteMany?: Enumerable<ResScalarWhereInput>
  }

  export type DeviceUncheckedUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutConnectionInput>, Enumerable<DeviceUncheckedCreateWithoutConnectionInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutConnectionInput>
    upsert?: Enumerable<DeviceUpsertWithWhereUniqueWithoutConnectionInput>
    set?: Enumerable<DeviceWhereUniqueInput>
    disconnect?: Enumerable<DeviceWhereUniqueInput>
    delete?: Enumerable<DeviceWhereUniqueInput>
    connect?: Enumerable<DeviceWhereUniqueInput>
    update?: Enumerable<DeviceUpdateWithWhereUniqueWithoutConnectionInput>
    updateMany?: Enumerable<DeviceUpdateManyWithWhereWithoutConnectionInput>
    deleteMany?: Enumerable<DeviceScalarWhereInput>
  }

  export type ConnectionCreateNestedOneWithoutReqInput = {
    create?: XOR<ConnectionCreateWithoutReqInput, ConnectionUncheckedCreateWithoutReqInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutReqInput
    connect?: ConnectionWhereUniqueInput
  }

  export type ConnectionUpdateOneRequiredWithoutReqNestedInput = {
    create?: XOR<ConnectionCreateWithoutReqInput, ConnectionUncheckedCreateWithoutReqInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutReqInput
    upsert?: ConnectionUpsertWithoutReqInput
    connect?: ConnectionWhereUniqueInput
    update?: XOR<ConnectionUpdateWithoutReqInput, ConnectionUncheckedUpdateWithoutReqInput>
  }

  export type ConnectionCreateNestedOneWithoutResInput = {
    create?: XOR<ConnectionCreateWithoutResInput, ConnectionUncheckedCreateWithoutResInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutResInput
    connect?: ConnectionWhereUniqueInput
  }

  export type ConnectionUpdateOneRequiredWithoutResNestedInput = {
    create?: XOR<ConnectionCreateWithoutResInput, ConnectionUncheckedCreateWithoutResInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutResInput
    upsert?: ConnectionUpsertWithoutResInput
    connect?: ConnectionWhereUniqueInput
    update?: XOR<ConnectionUpdateWithoutResInput, ConnectionUncheckedUpdateWithoutResInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumUserRoleFilter = {
    equals?: UserRole
    in?: Enumerable<UserRole>
    notIn?: Enumerable<UserRole>
    not?: NestedEnumUserRoleFilter | UserRole
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedEnumUserStatusFilter = {
    equals?: UserStatus
    in?: Enumerable<UserStatus>
    notIn?: Enumerable<UserStatus>
    not?: NestedEnumUserStatusFilter | UserStatus
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type NestedEnumUserRoleWithAggregatesFilter = {
    equals?: UserRole
    in?: Enumerable<UserRole>
    notIn?: Enumerable<UserRole>
    not?: NestedEnumUserRoleWithAggregatesFilter | UserRole
    _count?: NestedIntFilter
    _min?: NestedEnumUserRoleFilter
    _max?: NestedEnumUserRoleFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedEnumUserStatusWithAggregatesFilter = {
    equals?: UserStatus
    in?: Enumerable<UserStatus>
    notIn?: Enumerable<UserStatus>
    not?: NestedEnumUserStatusWithAggregatesFilter | UserStatus
    _count?: NestedIntFilter
    _min?: NestedEnumUserStatusFilter
    _max?: NestedEnumUserStatusFilter
  }

  export type NestedEnumDeviceStatusFilter = {
    equals?: DeviceStatus
    in?: Enumerable<DeviceStatus>
    notIn?: Enumerable<DeviceStatus>
    not?: NestedEnumDeviceStatusFilter | DeviceStatus
  }

  export type NestedEnumDeviceStatusWithAggregatesFilter = {
    equals?: DeviceStatus
    in?: Enumerable<DeviceStatus>
    notIn?: Enumerable<DeviceStatus>
    not?: NestedEnumDeviceStatusWithAggregatesFilter | DeviceStatus
    _count?: NestedIntFilter
    _min?: NestedEnumDeviceStatusFilter
    _max?: NestedEnumDeviceStatusFilter
  }

  export type NestedEnumThreatTypeFilter = {
    equals?: ThreatType
    in?: Enumerable<ThreatType>
    notIn?: Enumerable<ThreatType>
    not?: NestedEnumThreatTypeFilter | ThreatType
  }

  export type NestedEnumThreatTypeWithAggregatesFilter = {
    equals?: ThreatType
    in?: Enumerable<ThreatType>
    notIn?: Enumerable<ThreatType>
    not?: NestedEnumThreatTypeWithAggregatesFilter | ThreatType
    _count?: NestedIntFilter
    _min?: NestedEnumThreatTypeFilter
    _max?: NestedEnumThreatTypeFilter
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type NestedEnumConnectionStatusFilter = {
    equals?: ConnectionStatus
    in?: Enumerable<ConnectionStatus>
    notIn?: Enumerable<ConnectionStatus>
    not?: NestedEnumConnectionStatusFilter | ConnectionStatus
  }

  export type NestedEnumConnectionStatusWithAggregatesFilter = {
    equals?: ConnectionStatus
    in?: Enumerable<ConnectionStatus>
    notIn?: Enumerable<ConnectionStatus>
    not?: NestedEnumConnectionStatusWithAggregatesFilter | ConnectionStatus
    _count?: NestedIntFilter
    _min?: NestedEnumConnectionStatusFilter
    _max?: NestedEnumConnectionStatusFilter
  }

  export type DeviceCreateWithoutUserInput = {
    id?: string
    name: string
    status: DeviceStatus
    quarantine?: ThreatCreateNestedManyWithoutDeviceInput
    connection?: ConnectionCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    status: DeviceStatus
    quarantine?: ThreatUncheckedCreateNestedManyWithoutDeviceInput
    connection?: ConnectionUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceCreateOrConnectWithoutUserInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutUserInput, DeviceUncheckedCreateWithoutUserInput>
  }

  export type DeviceCreateManyUserInputEnvelope = {
    data: Enumerable<DeviceCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type DeviceUpsertWithWhereUniqueWithoutUserInput = {
    where: DeviceWhereUniqueInput
    update: XOR<DeviceUpdateWithoutUserInput, DeviceUncheckedUpdateWithoutUserInput>
    create: XOR<DeviceCreateWithoutUserInput, DeviceUncheckedCreateWithoutUserInput>
  }

  export type DeviceUpdateWithWhereUniqueWithoutUserInput = {
    where: DeviceWhereUniqueInput
    data: XOR<DeviceUpdateWithoutUserInput, DeviceUncheckedUpdateWithoutUserInput>
  }

  export type DeviceUpdateManyWithWhereWithoutUserInput = {
    where: DeviceScalarWhereInput
    data: XOR<DeviceUpdateManyMutationInput, DeviceUncheckedUpdateManyWithoutDevicesInput>
  }

  export type DeviceScalarWhereInput = {
    AND?: Enumerable<DeviceScalarWhereInput>
    OR?: Enumerable<DeviceScalarWhereInput>
    NOT?: Enumerable<DeviceScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    userId?: StringFilter | string
    status?: EnumDeviceStatusFilter | DeviceStatus
  }

  export type UserCreateWithoutDevicesInput = {
    id?: string
    username: string
    info?: NullableJsonNullValueInput | InputJsonValue
    email: string
    password: string
    userRole: UserRole
    avatar?: string | null
    googleUserId?: string | null
    userStatus?: UserStatus
    keywords?: UserCreatekeywordsInput | Enumerable<string>
  }

  export type UserUncheckedCreateWithoutDevicesInput = {
    id?: string
    username: string
    info?: NullableJsonNullValueInput | InputJsonValue
    email: string
    password: string
    userRole: UserRole
    avatar?: string | null
    googleUserId?: string | null
    userStatus?: UserStatus
    keywords?: UserCreatekeywordsInput | Enumerable<string>
  }

  export type UserCreateOrConnectWithoutDevicesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
  }

  export type ThreatCreateWithoutDeviceInput = {
    id?: string
    type: ThreatType
    info: JsonNullValueInput | InputJsonValue
  }

  export type ThreatUncheckedCreateWithoutDeviceInput = {
    id?: string
    type: ThreatType
    info: JsonNullValueInput | InputJsonValue
  }

  export type ThreatCreateOrConnectWithoutDeviceInput = {
    where: ThreatWhereUniqueInput
    create: XOR<ThreatCreateWithoutDeviceInput, ThreatUncheckedCreateWithoutDeviceInput>
  }

  export type ThreatCreateManyDeviceInputEnvelope = {
    data: Enumerable<ThreatCreateManyDeviceInput>
    skipDuplicates?: boolean
  }

  export type ConnectionCreateWithoutDeviceInput = {
    id?: string
    connectionStatus: ConnectionStatus
    req?: ReqCreateNestedManyWithoutConnectionInput
    res?: ResCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionUncheckedCreateWithoutDeviceInput = {
    id?: string
    connectionStatus: ConnectionStatus
    req?: ReqUncheckedCreateNestedManyWithoutConnectionInput
    res?: ResUncheckedCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionCreateOrConnectWithoutDeviceInput = {
    where: ConnectionWhereUniqueInput
    create: XOR<ConnectionCreateWithoutDeviceInput, ConnectionUncheckedCreateWithoutDeviceInput>
  }

  export type UserUpsertWithoutDevicesInput = {
    update: XOR<UserUpdateWithoutDevicesInput, UserUncheckedUpdateWithoutDevicesInput>
    create: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
  }

  export type UserUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    info?: NullableJsonNullValueInput | InputJsonValue
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userRole?: EnumUserRoleFieldUpdateOperationsInput | UserRole
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleUserId?: NullableStringFieldUpdateOperationsInput | string | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    keywords?: UserUpdatekeywordsInput | Enumerable<string>
  }

  export type UserUncheckedUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    info?: NullableJsonNullValueInput | InputJsonValue
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userRole?: EnumUserRoleFieldUpdateOperationsInput | UserRole
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleUserId?: NullableStringFieldUpdateOperationsInput | string | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    keywords?: UserUpdatekeywordsInput | Enumerable<string>
  }

  export type ThreatUpsertWithWhereUniqueWithoutDeviceInput = {
    where: ThreatWhereUniqueInput
    update: XOR<ThreatUpdateWithoutDeviceInput, ThreatUncheckedUpdateWithoutDeviceInput>
    create: XOR<ThreatCreateWithoutDeviceInput, ThreatUncheckedCreateWithoutDeviceInput>
  }

  export type ThreatUpdateWithWhereUniqueWithoutDeviceInput = {
    where: ThreatWhereUniqueInput
    data: XOR<ThreatUpdateWithoutDeviceInput, ThreatUncheckedUpdateWithoutDeviceInput>
  }

  export type ThreatUpdateManyWithWhereWithoutDeviceInput = {
    where: ThreatScalarWhereInput
    data: XOR<ThreatUpdateManyMutationInput, ThreatUncheckedUpdateManyWithoutQuarantineInput>
  }

  export type ThreatScalarWhereInput = {
    AND?: Enumerable<ThreatScalarWhereInput>
    OR?: Enumerable<ThreatScalarWhereInput>
    NOT?: Enumerable<ThreatScalarWhereInput>
    id?: StringFilter | string
    deviceId?: StringFilter | string
    type?: EnumThreatTypeFilter | ThreatType
    info?: JsonFilter
  }

  export type ConnectionUpsertWithWhereUniqueWithoutDeviceInput = {
    where: ConnectionWhereUniqueInput
    update: XOR<ConnectionUpdateWithoutDeviceInput, ConnectionUncheckedUpdateWithoutDeviceInput>
    create: XOR<ConnectionCreateWithoutDeviceInput, ConnectionUncheckedCreateWithoutDeviceInput>
  }

  export type ConnectionUpdateWithWhereUniqueWithoutDeviceInput = {
    where: ConnectionWhereUniqueInput
    data: XOR<ConnectionUpdateWithoutDeviceInput, ConnectionUncheckedUpdateWithoutDeviceInput>
  }

  export type ConnectionUpdateManyWithWhereWithoutDeviceInput = {
    where: ConnectionScalarWhereInput
    data: XOR<ConnectionUpdateManyMutationInput, ConnectionUncheckedUpdateManyWithoutConnectionInput>
  }

  export type ConnectionScalarWhereInput = {
    AND?: Enumerable<ConnectionScalarWhereInput>
    OR?: Enumerable<ConnectionScalarWhereInput>
    NOT?: Enumerable<ConnectionScalarWhereInput>
    id?: StringFilter | string
    connectionStatus?: EnumConnectionStatusFilter | ConnectionStatus
  }

  export type DeviceCreateWithoutQuarantineInput = {
    id?: string
    name: string
    status: DeviceStatus
    user: UserCreateNestedOneWithoutDevicesInput
    connection?: ConnectionCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUncheckedCreateWithoutQuarantineInput = {
    id?: string
    name: string
    userId: string
    status: DeviceStatus
    connection?: ConnectionUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceCreateOrConnectWithoutQuarantineInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutQuarantineInput, DeviceUncheckedCreateWithoutQuarantineInput>
  }

  export type DeviceUpsertWithoutQuarantineInput = {
    update: XOR<DeviceUpdateWithoutQuarantineInput, DeviceUncheckedUpdateWithoutQuarantineInput>
    create: XOR<DeviceCreateWithoutQuarantineInput, DeviceUncheckedCreateWithoutQuarantineInput>
  }

  export type DeviceUpdateWithoutQuarantineInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumDeviceStatusFieldUpdateOperationsInput | DeviceStatus
    user?: UserUpdateOneRequiredWithoutDevicesNestedInput
    connection?: ConnectionUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateWithoutQuarantineInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: EnumDeviceStatusFieldUpdateOperationsInput | DeviceStatus
    connection?: ConnectionUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type ReqCreateWithoutConnectionInput = {
    id?: string
    senderDeviceId: string
    receiverDeviceId: string
    reqExpress: JsonNullValueInput | InputJsonValue
  }

  export type ReqUncheckedCreateWithoutConnectionInput = {
    id?: string
    senderDeviceId: string
    receiverDeviceId: string
    reqExpress: JsonNullValueInput | InputJsonValue
  }

  export type ReqCreateOrConnectWithoutConnectionInput = {
    where: ReqWhereUniqueInput
    create: XOR<ReqCreateWithoutConnectionInput, ReqUncheckedCreateWithoutConnectionInput>
  }

  export type ReqCreateManyConnectionInputEnvelope = {
    data: Enumerable<ReqCreateManyConnectionInput>
    skipDuplicates?: boolean
  }

  export type ResCreateWithoutConnectionInput = {
    id?: string
    senderDeviceId: string
    receiverDeviceId: string
    resExpress: JsonNullValueInput | InputJsonValue
  }

  export type ResUncheckedCreateWithoutConnectionInput = {
    id?: string
    senderDeviceId: string
    receiverDeviceId: string
    resExpress: JsonNullValueInput | InputJsonValue
  }

  export type ResCreateOrConnectWithoutConnectionInput = {
    where: ResWhereUniqueInput
    create: XOR<ResCreateWithoutConnectionInput, ResUncheckedCreateWithoutConnectionInput>
  }

  export type ResCreateManyConnectionInputEnvelope = {
    data: Enumerable<ResCreateManyConnectionInput>
    skipDuplicates?: boolean
  }

  export type DeviceCreateWithoutConnectionInput = {
    id?: string
    name: string
    status: DeviceStatus
    user: UserCreateNestedOneWithoutDevicesInput
    quarantine?: ThreatCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUncheckedCreateWithoutConnectionInput = {
    id?: string
    name: string
    userId: string
    status: DeviceStatus
    quarantine?: ThreatUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceCreateOrConnectWithoutConnectionInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutConnectionInput, DeviceUncheckedCreateWithoutConnectionInput>
  }

  export type ReqUpsertWithWhereUniqueWithoutConnectionInput = {
    where: ReqWhereUniqueInput
    update: XOR<ReqUpdateWithoutConnectionInput, ReqUncheckedUpdateWithoutConnectionInput>
    create: XOR<ReqCreateWithoutConnectionInput, ReqUncheckedCreateWithoutConnectionInput>
  }

  export type ReqUpdateWithWhereUniqueWithoutConnectionInput = {
    where: ReqWhereUniqueInput
    data: XOR<ReqUpdateWithoutConnectionInput, ReqUncheckedUpdateWithoutConnectionInput>
  }

  export type ReqUpdateManyWithWhereWithoutConnectionInput = {
    where: ReqScalarWhereInput
    data: XOR<ReqUpdateManyMutationInput, ReqUncheckedUpdateManyWithoutReqInput>
  }

  export type ReqScalarWhereInput = {
    AND?: Enumerable<ReqScalarWhereInput>
    OR?: Enumerable<ReqScalarWhereInput>
    NOT?: Enumerable<ReqScalarWhereInput>
    id?: StringFilter | string
    connectionId?: StringFilter | string
    senderDeviceId?: StringFilter | string
    receiverDeviceId?: StringFilter | string
    reqExpress?: JsonFilter
  }

  export type ResUpsertWithWhereUniqueWithoutConnectionInput = {
    where: ResWhereUniqueInput
    update: XOR<ResUpdateWithoutConnectionInput, ResUncheckedUpdateWithoutConnectionInput>
    create: XOR<ResCreateWithoutConnectionInput, ResUncheckedCreateWithoutConnectionInput>
  }

  export type ResUpdateWithWhereUniqueWithoutConnectionInput = {
    where: ResWhereUniqueInput
    data: XOR<ResUpdateWithoutConnectionInput, ResUncheckedUpdateWithoutConnectionInput>
  }

  export type ResUpdateManyWithWhereWithoutConnectionInput = {
    where: ResScalarWhereInput
    data: XOR<ResUpdateManyMutationInput, ResUncheckedUpdateManyWithoutResInput>
  }

  export type ResScalarWhereInput = {
    AND?: Enumerable<ResScalarWhereInput>
    OR?: Enumerable<ResScalarWhereInput>
    NOT?: Enumerable<ResScalarWhereInput>
    id?: StringFilter | string
    connectionId?: StringFilter | string
    senderDeviceId?: StringFilter | string
    receiverDeviceId?: StringFilter | string
    resExpress?: JsonFilter
  }

  export type DeviceUpsertWithWhereUniqueWithoutConnectionInput = {
    where: DeviceWhereUniqueInput
    update: XOR<DeviceUpdateWithoutConnectionInput, DeviceUncheckedUpdateWithoutConnectionInput>
    create: XOR<DeviceCreateWithoutConnectionInput, DeviceUncheckedCreateWithoutConnectionInput>
  }

  export type DeviceUpdateWithWhereUniqueWithoutConnectionInput = {
    where: DeviceWhereUniqueInput
    data: XOR<DeviceUpdateWithoutConnectionInput, DeviceUncheckedUpdateWithoutConnectionInput>
  }

  export type DeviceUpdateManyWithWhereWithoutConnectionInput = {
    where: DeviceScalarWhereInput
    data: XOR<DeviceUpdateManyMutationInput, DeviceUncheckedUpdateManyWithoutDeviceInput>
  }

  export type ConnectionCreateWithoutReqInput = {
    id?: string
    connectionStatus: ConnectionStatus
    res?: ResCreateNestedManyWithoutConnectionInput
    device?: DeviceCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionUncheckedCreateWithoutReqInput = {
    id?: string
    connectionStatus: ConnectionStatus
    res?: ResUncheckedCreateNestedManyWithoutConnectionInput
    device?: DeviceUncheckedCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionCreateOrConnectWithoutReqInput = {
    where: ConnectionWhereUniqueInput
    create: XOR<ConnectionCreateWithoutReqInput, ConnectionUncheckedCreateWithoutReqInput>
  }

  export type ConnectionUpsertWithoutReqInput = {
    update: XOR<ConnectionUpdateWithoutReqInput, ConnectionUncheckedUpdateWithoutReqInput>
    create: XOR<ConnectionCreateWithoutReqInput, ConnectionUncheckedCreateWithoutReqInput>
  }

  export type ConnectionUpdateWithoutReqInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionStatus?: EnumConnectionStatusFieldUpdateOperationsInput | ConnectionStatus
    res?: ResUpdateManyWithoutConnectionNestedInput
    device?: DeviceUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionUncheckedUpdateWithoutReqInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionStatus?: EnumConnectionStatusFieldUpdateOperationsInput | ConnectionStatus
    res?: ResUncheckedUpdateManyWithoutConnectionNestedInput
    device?: DeviceUncheckedUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionCreateWithoutResInput = {
    id?: string
    connectionStatus: ConnectionStatus
    req?: ReqCreateNestedManyWithoutConnectionInput
    device?: DeviceCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionUncheckedCreateWithoutResInput = {
    id?: string
    connectionStatus: ConnectionStatus
    req?: ReqUncheckedCreateNestedManyWithoutConnectionInput
    device?: DeviceUncheckedCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionCreateOrConnectWithoutResInput = {
    where: ConnectionWhereUniqueInput
    create: XOR<ConnectionCreateWithoutResInput, ConnectionUncheckedCreateWithoutResInput>
  }

  export type ConnectionUpsertWithoutResInput = {
    update: XOR<ConnectionUpdateWithoutResInput, ConnectionUncheckedUpdateWithoutResInput>
    create: XOR<ConnectionCreateWithoutResInput, ConnectionUncheckedCreateWithoutResInput>
  }

  export type ConnectionUpdateWithoutResInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionStatus?: EnumConnectionStatusFieldUpdateOperationsInput | ConnectionStatus
    req?: ReqUpdateManyWithoutConnectionNestedInput
    device?: DeviceUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionUncheckedUpdateWithoutResInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionStatus?: EnumConnectionStatusFieldUpdateOperationsInput | ConnectionStatus
    req?: ReqUncheckedUpdateManyWithoutConnectionNestedInput
    device?: DeviceUncheckedUpdateManyWithoutConnectionNestedInput
  }

  export type DeviceCreateManyUserInput = {
    id?: string
    name: string
    status: DeviceStatus
  }

  export type DeviceUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumDeviceStatusFieldUpdateOperationsInput | DeviceStatus
    quarantine?: ThreatUpdateManyWithoutDeviceNestedInput
    connection?: ConnectionUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumDeviceStatusFieldUpdateOperationsInput | DeviceStatus
    quarantine?: ThreatUncheckedUpdateManyWithoutDeviceNestedInput
    connection?: ConnectionUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateManyWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumDeviceStatusFieldUpdateOperationsInput | DeviceStatus
  }

  export type ThreatCreateManyDeviceInput = {
    id?: string
    type: ThreatType
    info: JsonNullValueInput | InputJsonValue
  }

  export type ThreatUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumThreatTypeFieldUpdateOperationsInput | ThreatType
    info?: JsonNullValueInput | InputJsonValue
  }

  export type ThreatUncheckedUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumThreatTypeFieldUpdateOperationsInput | ThreatType
    info?: JsonNullValueInput | InputJsonValue
  }

  export type ThreatUncheckedUpdateManyWithoutQuarantineInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumThreatTypeFieldUpdateOperationsInput | ThreatType
    info?: JsonNullValueInput | InputJsonValue
  }

  export type ConnectionUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionStatus?: EnumConnectionStatusFieldUpdateOperationsInput | ConnectionStatus
    req?: ReqUpdateManyWithoutConnectionNestedInput
    res?: ResUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionUncheckedUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionStatus?: EnumConnectionStatusFieldUpdateOperationsInput | ConnectionStatus
    req?: ReqUncheckedUpdateManyWithoutConnectionNestedInput
    res?: ResUncheckedUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionUncheckedUpdateManyWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionStatus?: EnumConnectionStatusFieldUpdateOperationsInput | ConnectionStatus
  }

  export type ReqCreateManyConnectionInput = {
    id?: string
    senderDeviceId: string
    receiverDeviceId: string
    reqExpress: JsonNullValueInput | InputJsonValue
  }

  export type ResCreateManyConnectionInput = {
    id?: string
    senderDeviceId: string
    receiverDeviceId: string
    resExpress: JsonNullValueInput | InputJsonValue
  }

  export type ReqUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderDeviceId?: StringFieldUpdateOperationsInput | string
    receiverDeviceId?: StringFieldUpdateOperationsInput | string
    reqExpress?: JsonNullValueInput | InputJsonValue
  }

  export type ReqUncheckedUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderDeviceId?: StringFieldUpdateOperationsInput | string
    receiverDeviceId?: StringFieldUpdateOperationsInput | string
    reqExpress?: JsonNullValueInput | InputJsonValue
  }

  export type ReqUncheckedUpdateManyWithoutReqInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderDeviceId?: StringFieldUpdateOperationsInput | string
    receiverDeviceId?: StringFieldUpdateOperationsInput | string
    reqExpress?: JsonNullValueInput | InputJsonValue
  }

  export type ResUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderDeviceId?: StringFieldUpdateOperationsInput | string
    receiverDeviceId?: StringFieldUpdateOperationsInput | string
    resExpress?: JsonNullValueInput | InputJsonValue
  }

  export type ResUncheckedUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderDeviceId?: StringFieldUpdateOperationsInput | string
    receiverDeviceId?: StringFieldUpdateOperationsInput | string
    resExpress?: JsonNullValueInput | InputJsonValue
  }

  export type ResUncheckedUpdateManyWithoutResInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderDeviceId?: StringFieldUpdateOperationsInput | string
    receiverDeviceId?: StringFieldUpdateOperationsInput | string
    resExpress?: JsonNullValueInput | InputJsonValue
  }

  export type DeviceUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumDeviceStatusFieldUpdateOperationsInput | DeviceStatus
    user?: UserUpdateOneRequiredWithoutDevicesNestedInput
    quarantine?: ThreatUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: EnumDeviceStatusFieldUpdateOperationsInput | DeviceStatus
    quarantine?: ThreatUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateManyWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: EnumDeviceStatusFieldUpdateOperationsInput | DeviceStatus
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}